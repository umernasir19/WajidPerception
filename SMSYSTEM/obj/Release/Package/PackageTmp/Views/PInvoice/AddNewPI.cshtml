@model SSS.Property.Transactions.ViewModels.LP_PI_ViewModel
@{
    ViewBag.Title = "AddNewPI";
    Layout = "~/Views/Shared/_Layout.cshtml";
}





<div class="card-body">
    <h3>Purchase Invoice</h3>
    <br />
    <form role="form" id="purchaseform">
        @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })

        @Html.HiddenFor(model => model.VendorID, new { id = "VendorID" })

        <div class="row">


            <div class="col-sm-3">
                <!-- text input -->

                <div class="form-group">
                    <label>Select PO:</label>
                    @Html.DropDownListFor(model => model.ParentDocID, new SelectList(Model.POLIST, "idx", "PoNumber"), "Select PO", new { @Class = "form-control font-weight-bold" })
                </div>
                @Html.ValidationMessageFor(model => model.ParentDocID, "", new { @class = "text-danger" })
            </div>


        </div>
        <div class="row">

            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>PI Number*:</label>
                    @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new { @placeholder = "PO Number*:", @class = "form-control", @readonly = true } })
                    @*<input type="text" class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.InvoiceNo, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Invoice Date*:</label>
                    @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @placeholder = "Purchase Date*:", @readonly = true, @class = "form-control" } })
                    @*<input type="text" class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="row" id="PurchaseDetails">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header" style="background-color:rgb(43, 174, 240);">
                        <h3 class="card-title" style=" color:white">Invoice Details</h3>
                        <div class="card-tools">

                        </div>
                    </div>
                    <div class="card-body">

                        <div class="row" style="display:block; overflow:scroll" id="milestones">
                            <div class="col-md-12">
                                <div class="card card-primary">
                                    <div class="card-header">
                                        <h3 class="card-title">Invoice Details</h3>
                                        <div class="card-tools">

                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <table id="example2" class="table table-striped table-bordered table-condensed table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Product Name</th>
                                                    <th>Weight(KG)/QTY</th>
                                                    <th>Unit Price(KG/QTY)</th>
                                                    <th>Total Amount</th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @{
                                                    if (ViewBag.DetailData != null)
                                                    {



                                                        foreach (var items in ViewBag.DetailData)
                                                        {
                                                            <tr>
                                                                <td style="display:none">@items.itemIdx</td>
                                                                <td>@items.itemName</td>
                                                                <td>@items.qty</td>
                                                                <td>@items.unitPrice</td>
                                                                <td>@items.amount</td>
                                                            </tr>

                                                        }
                                                    }
                                                }
                                            </tbody>
                                        </table>

                                    </div>

                                    <!-- /.card-body -->
                                </div>
                                <!-- /.card -->
                            </div>

                        </div>

                    </div>

                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>




        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="inputName">Description</label>
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Total Amount</label>
                    @Html.EditorFor(model => model.TotalAmount, new { htmlAttributes = new { @placeholder = "Total Amount", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.TotalAmount, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Net Amount</label>
                    @Html.EditorFor(model => model.NetAmount, new { htmlAttributes = new { @placeholder = "Net Amount", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.NetAmount, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Paid Amount</label>
                    @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new { @placeholder = "Paid Amount", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Balance Amount</label>
                    @Html.EditorFor(model => model.BalanceAmount, new { htmlAttributes = new { @placeholder = "Balance Amount", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.BalanceAmount, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div class="form-group">
                    <label class="form-check-label">
                        Taxes
                        <i class="input-helper"></i>
                    </label>
                </div>

            </div>
        </div>
        <hr />
        <div id="checkboxdiv" class="row">

            @{
                foreach (var taxes in Model.TaxesList)
                {


                    <div class="col-sm-2">
                        <div class="form-check">
                            <input class="form-check-input" data-id="@taxes.taxPercent" value="@taxes.idx" type="checkbox">
                            <label class="form-check-label">@taxes.taxName (@taxes.taxPercent) %</label>
                        </div>
                    </div>
                }
            }
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <input type="button" class="btn btn-primary form-control" id="calcfinal" value="Calculate Final Amount" />
                </div>
            </div>
        </div>
    </form>
</div>
@section MyScripts {
<script type="text/javascript">

    // Add To grid
    $("#ParentDocID").on('change', function () {
        var ddvaue = $("#ParentDocID option:selected").val();
        if (ddvaue > 0) {
            GetPODataSet(ddvaue)
            $('#btnaddtogrid').attr('disabled', true);
        }
        else
        {
            $("#example2 tbody").empty();
            $('#btnaddtogrid').attr('disabled', false);
            $("#totalAmount").val("0");
        }

    });

    function GetPODataSet(poid) {
        $.ajax({
            url: "/PInvoice/SelectGRNById",
            data: { id: poid },
            success: function (data) {
                var POData = JSON.parse(data.data);
                console.log(POData);
                $('#VendorID').val(POData[0].vendorIdx);
                $('#ParentDocID').val(POData[0].ID);
                $("#example2 tbody").empty();
                $('#milestones').show();
                var markup;
                var tamount = 0;
                for (var i = 0; i < POData.length; i++) {

                    console.log(data[i]);
                   // var closebutton = '<input type="button" value="x" id="deleterow" disable="true" class="fa fa-window-close close" />';
                   // var unitPrice = '<input type="text" placeholder="Enter Unit Price" onkeyup="changeinunitprice(this)" value="0" id="unitprice" class="form-control" />';

                    //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                    //'<span aria-hidden="true" styel="color:red">&times;</span>' +
                    // '</button>'

                    var productname = POData[i].itemName; //$("#itemIdx option:selected").text();
                    var ProductID = POData[i].itemIdx;// $("#itemIdx option:selected").val();
                    var Qty = POData[i].Quantity;// $("#qty").val();
                    var unitprice = POData[i].Rate;// $("#unitPrice").val();
                    //var totalamount = POData[i].qty * POData[i].unitPrice;
                    //var unitprice = $("#unitPrice").val();
                    var totalamount = unitprice*Qty;

                    tamount = tamount + totalamount
                    $("#TotalAmount").val(tamount);
                    $("#NetAmount").val(tamount);
                    $("#BalanceAmount").val(tamount);
                    //var duedate = $("#DueDate").val();
                    markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + unitprice + "</td><td class='tamnt'>" + totalamount + "</td><td>" +  + "</td></tr>";
                    //console.log(markup);

                    $("#example2 tbody").append(markup);

                }

                var tamount = 0;

                $("#totalAmount").val(tamount);

            }
        });
    }
    var errmsg;
    //Add Project Button Event start
    $("#qty").keyup(function () {
        var qtyval = $(this).val();
        var unitpriceval = $("#unitPrice").val();
        var totalamount = qtyval * unitpriceval;

        $("#amount").val(totalamount);
    });
    $("#unitPrice").keyup(function () {
        var unitpriceval = $(this).val();
        var qtyval = $("#qty").val();
        var totalamount = qtyval * unitpriceval;
        $("#amount").val(totalamount);
    });


    $("#btnaddtogrid").click(function (e) {
        if (!(gridValidation($("#itemIdx option:selected").val()))) {
           // alert("Product Alreaty Exist")
            displayerror();
            return;
        }


       // alert("hello");
        $('#milestones').show();
        //var closebutton = '<input type="button" value="x" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="fa fa-window-close close" />';
            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                         //'<span aria-hidden="true" styel="color:red">&times;</span>' +
                         // '</button>'
        var productname = $("#itemIdx option:selected").text();
        var ProductID = $("#itemIdx option:selected").val();
        var Qty = $("#qty").val();
        var unitprice = $("#unitPrice").val();
        var totalamount = $("#amount").val();
        //var duedate = $("#DueDate").val();
        var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + unitprice + "</td><td class='tamnt'>" + totalamount + "</td></tr>";//<td>" + closebutton + "</td></tr>";
        //if (milestone == "") {
        //    alert("Enter milestone");
        //    return;
        //} else {

        $("#example2 tbody").append(markup);
        var tamount = 0;
        //var labourcost = $("#tax").val();
        //var transportcost = $("#taxAount").val();
       var tamount =parseFloat( $("#totalAmount").val());
       tamount = parseFloat(tamount) + parseFloat(totalamount);//+ parseFloat(labourcost) + parseFloat(transportcost);
        $("#totalAmount").val(tamount);



    });
    $('#purchaseDate').change(function () {
        var date = $(this).val();
        console.log(date, 'change')
        var GivenDate = date;
        var CurrentDate = new Date();
        GivenDate = new Date(GivenDate);

        if (GivenDate > CurrentDate) {
            alert('Given date is greater than the current date.');
            var today = moment().format('YYYY-MM-DD');
            $('#purchaseDate').val(today);
        } else {
           // alert('Given date is not greater than the current date.');
        }
    });
    function SomeDeleteRowFunction(o) {
        //alert(id);
        var $row = $(this).closest("tr"),        // Finds the closest row <tr>
             $tds = $row.find("td:nth-child(2)");
        //console.log($tds);

        $.each($tds, function () {                // Visits every single <td> element
           // console.log($(this).text());         // Prints out the text within the <td>
        });
        var itmmant = o.parentNode.parentNode.children[4].innerText;
        var tmnt = $('#totalAmount').val();

        tmnt = tmnt - itmmant;
        $('#totalAmount').val(tmnt);

       // $('#balanceAmount').val(tmnt);
        var p = o.parentNode.parentNode;

        p.parentNode.removeChild(p);
        $(this).closest('tr').remove();


    };

    function changeinunitprice(o) {
        //alert(id);
        var $row = $(this).closest("tr"),        // Finds the closest row <tr>
             $tds = $row.find("td:nth-child(2)");
        //console.log($tds);


        var itmqty = o.parentNode.parentNode.children[2].innerText;

        var itmup = o.parentNode.parentNode.children[3].children[0].value;

        itmqty = Number(itmqty);
        itmup = Number(itmup);

        var tmnt = $('.tamnt').val()
        tmnt = Number(itmqty) * Number(itmup);

        $('.tamnt').val(tmnt);
        var totalamnt =o.parentNode.parentNode.children[4].innerText = (parseFloat(itmqty) * parseFloat(itmup));

        var tmnt = $('#totalAmount').val();
        tmnt = Number(tmnt) + (Number(itmqty) * Number(itmup))
        $('#totalAmount').val(tmnt)
        //alert(tmnt);



    };

    function gridValidation(Id) {
        errmsg = [];
        var myTab = $("#example2 tbody");
        var rtrn = true;

        // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
        myTab.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
                productid = $tds.eq(0).text();

            if(Id==productid){
                rtrn = false;
                errmsg.push("Product Already exist");
            }
        })
        if ($('#itemIdx option:selected').val() =='') {
            rtrn = false;
            errmsg.push("Select Product");
        }
        if ($('#qty').val() <= 0) {
            rtrn = false;
            errmsg.push("Qty value is zero");
        }
        if ($('#unitPrice').val() <= 0) {
            rtrn = false;
            errmsg.push("unit value is zero");
        }
        //if ($('#DueDate').val() < 0) {
        //    rtrn = false;
        //    errmsg.push("DUE date is Invalid");
        //}
        //var dat = $('#DueDate').val()
        //console.log(moment((new Date())).format("DD-MM-YYYY"));
        //var today = moment((new Date())).format("DD-MM-YYYY");
        //var slctddte = moment(dat).format("DD-MM-YYYY");

        //if ((new Date($('#DueDate').val())) == 'Invalid Date') {
        //    rtrn = false;
        //    errmsg.push("DUE date is invalid ");
        //    // alert(errorarray.length);
        //}
        //if (slctddte < today) {
        //    rtrn = false;
        //    errmsg.push("DUE date is INVALID /Should be greater than current date");
        //    // alert(errorarray.length);
        //}
        return rtrn;
    }

    function displayerror() {
        for (var i = 0; i < errmsg.length; i++) {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-top-center",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
            Command: toastr["error"](errmsg[i], "")
        }
    }
    $("#calcfinal").click(function () {
        $('#TotalAmount').val($('#NetAmount').val());
        var count = 0;
       // alert("d")
        $("#purchaseform input:checkbox:checked").each(function () {
            // alert($(this).val())

            if (($(this).val()) > 0) {

                var taxpercent = $(this).attr('data-id');

                var NetAmount = $('#NetAmount').val();

                var NetAmntTaxValue = percentage(NetAmount, taxpercent);
                var totalamount = parseFloat($('#TotalAmount').val()) + parseFloat(NetAmntTaxValue);
                $('#TotalAmount').val(totalamount);

                count++;
            }


            // add $(this).val() to your array
        });

        if (count <= 0) {
            $('#TotalAmount').val($('#NetAmount').val());
        }
    });
    function percentage(num, per) {
        console.log(num)
        var totalpercntage = (num / 100) * per;
       // console.log(totalpercntage)
        return totalpercntage
    }

</script>
}





