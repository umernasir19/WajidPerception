@model SSS.Property.Setups.QuotationVM_Property
@{
    ViewBag.Title = "AddQuotaion";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card-body">
    <h3>Quotation</h3>
    <br />
    <form role="form" id="purchaseform">
        @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })


        <div class="row">

            @{
                if (Model.idx > 0)
                {

                }
                else
                {
                   
                    <div class="col-sm-3">
                        <!-- text input -->
                        <div class="form-group">
                            <label>Customer*:</label>

                            @Html.DropDownListFor(model => model.customerIdx, new SelectList(Model.CustomerLST, "idx", "customerName"), "Select Customers", new { @Class = "form-control font-weight-bold" })

                        </div>
                        @Html.ValidationMessageFor(model => model.customerIdx, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <!-- text input -->
                        <div class="form-group">
                            <label>SI Number*:</label>
                            @Html.EditorFor(model => model.qsNumber, new { htmlAttributes = new { @placeholder = "QS Number*:", @class = "form-control", @readonly = true } })
                            @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                        </div>
                        @Html.ValidationMessageFor(model => model.qsNumber, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-3">
                        <!-- text input -->
                        <div class="form-group">
                            <label>Date*:</label>
                            @Html.EditorFor(model => model.quotationDate, new { htmlAttributes = new { @placeholder = "Quotation Date*:", @class = "form-control" } })
                            @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                        </div>
                        @Html.ValidationMessageFor(model => model.quotationDate, "", new { @class = "text-danger" })
                    </div>
                }
            }
        </div>
        <div class="row">
            <div class="col-sm-3">
                <!-- text input -->

                <div class="form-group">
                    <label>Reference:</label>

                    @Html.EditorFor(model => model.reference, new { htmlAttributes = new { @placeholder = "Reference:", @class = "form-control" } })

                </div>
                @Html.ValidationMessageFor(model => model.reference, "", new { @class = "text-danger" })
            </div>
            
            <div class="col-3">
                <div class="form-group">
                    <label></label>

                    <button type="button" class="btn form-control btn-primary btn-sm" id="btnaddnew" data-toggle="modal" data-target="#exampleModal">Add Customer<i class="mdi mdi-play-circle ml-1"></i></button>


                </div>
            </div>
        </div>
        <hr />
        <div class="row" id="PurchaseDetails">
            <div class="col-md-12">
                <div class="card card-primary">
                    @*<div class="card-header" style="background-color:black;color:white">*@
                        <h5>+Add Product</h5>
                        @*<div class="card-tools">

                        </div>*@
                    </div>
                    <div class="">
                        <table class="table table-striped table-bordered table-condensed table-hover table-active">
                            <thead class="thead-light">
                                <tr>
                                    <th>Item Name</th>
                                    <th>Stock</th>
                                    <th>Cost Price</th>
                                    <th>QTY</th>
                                    <th>Sales Rate</th>
                                    <th>Amount</th>
                                    <th>Action</th>
                                </tr>

                            </thead>
                            <tbody class="" style="background:white;">
                                <tr>
                                    <td>@Html.DropDownListFor(model => model.itemIdx, new SelectList(Model.ProductList, "idx", "itemName"), "Select Product", new { @Class = "form-control font-weight-bold" })</td>
                                    <td>@Html.EditorFor(model => model.stock, new { htmlAttributes = new { @placeholder = "Stock", @value = "hello", @class = "form-control", @readonly = "true" } })</td>
                                    <td>@Html.EditorFor(model => model.costPrice, new { htmlAttributes = new { @placeholder = "Cost Price", @class = "form-control", @readonly = "true" } })</td>
                                    <td>@Html.EditorFor(model => model.qty, new { htmlAttributes = new { @placeholder = "Qty", @class = "form-control" } })</td>
                                    <td>@Html.EditorFor(model => model.salePrice, new { htmlAttributes = new { @placeholder = "Unit Price", @class = "form-control" } })</td>
                                    <td>@Html.EditorFor(model => model.amount, new { htmlAttributes = new { @placeholder = "Total Price", @class = "form-control", @readonly = true } })</td>

                                    <td>


                                        <input type="button" value="+" id="btnaddtogrid" class="btn btn-outline-primary" style="font-size: 20px " />

                                    </td>

                                </tr>

                            </tbody>
                        </table>

                        <div class="row" style="display:block; overflow:scroll" id="milestones">
                            <div class="col-md-12">
                                <div class="card card-primary">

                                    <div class="">
                                        <table id="example2" class=" table table-dark table-bordered table-hover">
                                            <thead class="thead-dark">
                                                <tr>
                                                    <th>Product Name</th>
                                                    <th>QTY</th>
                                                    <th>Sale Rate</th>
                                                    <th>Sub Amount</th>

                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody style="background:white;color:black; ">

                                                @{
                                                    if (ViewBag.DetailData != null)
                                                    {



                                                        foreach (var items in ViewBag.DetailData)
                                                        {
                                                            <tr>
                                                                <td style="display:none">@items.itemIdx</td>
                                                                <td>@items.itemName</td>
                                                                <td>@items.qty</td>
                                                                <td><input type="text" placeholder="Enter Sales Price" onkeyup="changeinunitprice(this)" value="@items.salePrice" id="salePrice" class="form-control" /></td>
                                                                @*<td id="unitprice"></td>*@
                                                                <td>@items.amount</td>
                                                                @*<td><i class="icon-trash menu-icon" id="btnaddtogrid"><input type="button" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close btn-danger" /></i></td>*@
                                                                <td><button id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close btn btn-outline-danger"><i class="fa fa-trash menu-icon"></i></button></td>
                                                            </tr>

                                                        }
                                                    }
                                                }
                                            </tbody>
                                        </table>

                                    </div>

                                    <!-- /.card-body -->
                                </div>
                                <!-- /.card -->
                            </div>

                        </div>

                    </div>

                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>




        </div>


        <div class="row">
            <div class="col-sm-12">
                <div class="form-group ">
                    <label for="inputName">Taxes</label>
                    <select class="col-12 form-control" id="ddlTax">
                        <option value="0">Without Taxes</option>
                        <option value="1">With Taxes</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="row form-control-lg" id="checkboxdiv">

        </div>
        </br>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="inputName">Description</label>

                    @Html.EditorFor(model => model.description, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Discount</label>
                    @Html.EditorFor(model => model.discount, new { htmlAttributes = new { @placeholder = "Discount", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.discount, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Shipping Cost</label>
                    @Html.EditorFor(model => model.shippingCost, new { htmlAttributes = new { @type = "number", @placeholder = "Shipping Cost", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.shippingCost, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Gross Amount</label>
                    @Html.EditorFor(model => model.netAmount, new { htmlAttributes = new { @type = "number", @placeholder = "Total Amount", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.netAmount, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Total Amount</label>
                    @Html.EditorFor(model => model.totalAmount, new { htmlAttributes = new { @placeholder = "Total Amount", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.totalAmount, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Tax Amount</label>
                    @Html.EditorFor(model => model.taxAount, new { htmlAttributes = new { @placeholder = "Total Amount", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.taxAount, "", new { @class = "text-danger" })
            </div>
            @*<div class="col-sm-2">
                <div class="form-group">
                    <label for="inputName"></label>
                    <input type="button" class="btn btn-primary form-control" id="calculate" value="Calculate Total" />
                </div>
            </div>*@
        </div>
 
        <div class="row">
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="btnAddSale">Submit</button>
                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </form>
</div>


<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add New Customer</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modelbody">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="btnsubmit">Submit</button>
                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@section MyScripts
    {
    <script type="text/javascript">
    $("#btnaddnew").click(function () {
        //$.post("/Customer/AddCustomer", function (data) {
        //    $("#modal-default").html(data);
        //});

        $("#modelbody").load("/Customer/AddNewCustomer", function (e) {
            $("#modal-default").modal("show");


        });

    })
    var taxlist;
    $(document).ready(function () {
        taxlist=@Html.Raw(Json.Encode(ViewBag.TaxList));

    });
    $("#ddlTax").on('change', function () {
        var ddlvalue = $("#ddlTax option:selected").val();

            if (ddlvalue ==1 ) {
                CreateAndbindCheckBox(taxlist);
                calculation();
            }
            else {

                RemoveCheckBox(taxlist);
                calculation();
            }
        //}


    });

    $("#itemIdx").on('change', function () {
        var ddvaue = $("#itemIdx option:selected").val();
        if (ddvaue > 0) {
            $.ajax({
                url: "/SalesOrder/SelectProductStockAndUpById",
                data: { id: ddvaue },
                success: function (data) {
                    var stockAndPrice = JSON.parse(data.data);
                    //console.log(data1)
                    $('#stock').val(stockAndPrice[0].STOCK);
                    $('#costPrice').val(parseFloat(stockAndPrice[0].rate).toFixed(2));


                }
                ,err: function (data) {
                    
                    $('#stock').val('0.00');
                    $('#costPrice').val('0.00');


                }
            });       
        }
        else
        {
            $('#stock').val('0.00');
            $('#costPrice').val('0.00');
            
        }

    });

    function CreateAndbindCheckBox(pagelistdata) {
        console.log(pagelistdata);
        for (var i = 0; i < pagelistdata.length; i++) {
            var divopen = '<div class="col-sm-2"><div class="form-check">';
            var createcheckbox = '<input class="form-check-input" onclick="calculation()"  value='+pagelistdata[i].taxPercent+' data-Id=' + pagelistdata[i].idx + ' type="checkbox" name="tax">';
            var checkboxlabel = '<label class="form-check-label">' + pagelistdata[i].taxName + '</label>';
            var divclose = '</div></div>';
            var dictoappend = divopen + createcheckbox + checkboxlabel + divclose;
            $('#checkboxdiv').append(dictoappend);
            $('#checkboxdiv').show();

        }


    }
    function RemoveCheckBox(pagelistdata) {
        console.log(pagelistdata);
        for (var i = 0; i < pagelistdata.length; i++) {
            var divopen = '<div class="col-sm-2"><div class="form-check">';
            var createcheckbox = '<input class="form-check-input" data-Id=' + pagelistdata[i].idx + ' type="checkbox">';
            var checkboxlabel = '<label class="form-check-label">' + pagelistdata[i].taxName + '</label>';
            var divclose = '</div></div>';
            //var dictoappend = divopen + createcheckbox + checkboxlabel + divclose;
            //$('#checkboxdiv').append(dictoappend)
            $('#checkboxdiv').empty();
            $('#checkboxdiv').hide();
            //$('#mydiv').empty();
        }


    }
    // Add To grid
 

   
    var errmsg;
    //Add Project Button Event start
    function sumqty()
    {
        $("#qty").keyup(function () {
            var qtyval = $(this).val();
            var salePriceval = $("#salePrice").val();
            var totalamount = qtyval * salePriceval;

            $("#amount").val(totalamount);
            calculation();
        });
    }
    $("#qty").keyup(function () {
        var qtyval = $(this).val();
        var salePriceval = $("#salePrice").val();
        var totalamount = qtyval * salePriceval;

        $("#amount").val(totalamount);
        calculation();
    });
    $("#salePrice").keyup(function () {
        var salePriceval = $(this).val();
        var qtyval = $("#qty").val();
        var totalamount = qtyval * salePriceval;
        $("#amount").val(totalamount);
        calculation();
    });

    $("#discount").keyup(function () {
        
        calculation();
    });
    $("#shippingCost").keyup(function () {
        
        calculation();
    });
    $("#btnaddtogrid").click(function (e) {
        if (!(gridValidation($("#itemIdx option:selected").val()))) {
           // alert("Product Alreaty Exist")
            displayerror();
            return;
        }


       // alert("hello");
        $('#milestones').show();
        var actualSalePrice   =$("#salePrice").val();
        var actualQty   =$("#qty").val();
        var closebutton = '<button id="deleterow" onclick="SomeDeleteRowFunction(this)"  class="close btn "><i class="fa fa-trash menu-icon"></i></button>';
            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                         //'<span aria-hidden="true" styel="color:red">&times;</span>' +
                         // '</button>'
        var productname = $("#itemIdx option:selected").text();
        var ProductID = $("#itemIdx option:selected").val();
        var Qty = '<input type="text" placeholder="Enter Sales Price" onkeyup="changeinunitprice(this)" value="'+actualQty+'"  id="qty" class="form-control" />';
        //onkeyup="changeinunitprice(this)"
        var salePrice = '<input type="text" placeholder="Enter Sales Price" onkeyup="changeinunitprice(this)" value="'+actualSalePrice+'"  id="salePrice" class="form-control" />';
        //$('#salePrice').text(actualSalePrice);
        var totalamount = $("#amount").val();
        //var duedate = $("#DueDate").val();
        var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + salePrice + "</td><td class='tamnt'>" + totalamount + "</td><td>" + closebutton + "</td></tr>";
        //if (milestone == "") {
        //    alert("Enter milestone");
        //    return;
        //} else {

        $("#example2 tbody").append(markup);
        var tamount = 0;
        //var labourcost = $("#tax").val();
        //var transportcost = $("#taxAount").val();
       var tamount =parseFloat( $("#totalAmount").val());
       tamount = parseFloat(tamount) + parseFloat(totalamount);//+ parseFloat(labourcost) + parseFloat(transportcost);
       $("#totalAmount").val(tamount);
       $("#netAmount").val(tamount);

       calculation();

    });
    $('#quotationDate').change(function () {
        var date = $(this).val();
        console.log(date, 'change')
        var GivenDate = date;
        var CurrentDate = new Date();
        GivenDate = new Date(GivenDate);

        if (GivenDate > CurrentDate) {
            alert('Given date is greater than the current date.');
            var today = moment().format('YYYY-MM-DD');
            $('#quotationDate').val(today);
        } else {
           // alert('Given date is not greater than the current date.');
        }
    });
    function SomeDeleteRowFunction(o) {
        //alert(id);
        var $row = $(this).closest("tr"),        // Finds the closest row <tr>
             $tds = $row.find("td:nth-child(2)");
        //console.log($tds);

        $.each($tds, function () {                // Visits every single <td> element
           // console.log($(this).text());         // Prints out the text within the <td>
        });
        var itmmant = o.parentNode.parentNode.children[4].innerText;
        var tmnt = $('#totalAmount').val();

        tmnt = tmnt - itmmant;
        $('#totalAmount').val(tmnt);
        $('#netAmount').val(tmnt);
       // $('#balanceAmount').val(tmnt);
        var p = o.parentNode.parentNode;

        p.parentNode.removeChild(p);
        $(this).closest('tr').remove();


    };

    function changeinunitprice(o) {
        //alert(id);
        var $row = $(this).closest("tr"),        // Finds the closest row <tr>
             $tds = $row.find("td:nth-child(2)");
        //console.log($tds);


        var itmqty = o.parentNode.parentNode.children[2].children[0].value;

        var itmup = o.parentNode.parentNode.children[3].children[0].value;

        itmqty = Number(itmqty);
        itmup = Number(itmup);

        var tmnt = $('.tamnt').val()
        tmnt = Number(itmqty) * Number(itmup);

        $('.tamnt').val(tmnt);
        var totalamnt =o.parentNode.parentNode.children[4].innerText = (parseFloat(itmqty) * parseFloat(itmup));

        var tmnt = $('#totalAmount').val();
        tmnt = Number(tmnt) + (Number(itmqty) * Number(itmup))
        $('#totalAmount').val(tmnt)
        //alert(tmnt);
        calculation();


    };

    function gridValidation(Id) {
        errmsg = [];
        var myTab = $("#example2 tbody");
        var rtrn = true;

        // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
        myTab.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
                productid = $tds.eq(0).text();

            if(Id==productid){
                rtrn = false;
                errmsg.push("Product Already exist");
            }
        })
        if ($('#itemIdx option:selected').val() =='') {
            rtrn = false;
            errmsg.push("Select Product");
        }
        if ($('#qty').val() <= 0) {
            rtrn = false;
            errmsg.push("Qty value is zero");
        }
        if ($('#salePrice').val() <= 0) {
            rtrn = false;
            errmsg.push("Sale Price value is zero");
        }

        return rtrn;
    }

    function displayerror() {
        for (var i = 0; i < errmsg.length; i++) {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-top-center",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
            Command: toastr["error"](errmsg[i], "")
        }
    }

    $("#calculate").click(function (e) {
        var tmnt = $('#totalAmount').val('0');
        var table = $("#example2 tbody");
            table.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
              itemamount = $tds.eq(4).text();

            //console.log(itemamount);
           // itemamount = itemamount + itemamount;
            var calculateNetAmount=0;
            var totalTaxAmount=0;;
            var tamnt = $('#totalAmount').val();
            tamnt = Number(tamnt) + (Number(itemamount))
            $('#totalAmount').val(tamnt)
            $('#netAmount').val(tamnt)
            var result = $('input[name="tax"]:checked');
            console.log(result);
            if (result.length > 0) {
                result.each(function () {
                    var amount = parseFloat(parseFloat(calculateNetAmount).toFixed(2));
                    var currentPercentage=$(this).val();
                    //alert(currentPercentage)
                    var currentAmountOnCheckBox =(Number(tamnt)/Number(100))*Number(currentPercentage);
                    totalTaxAmount=parseFloat(Number(currentAmountOnCheckBox)+Number(totalTaxAmount)).toFixed(2);
                    //alert(currentAmountOnCheckBox);
                    calculateNetAmount= parseFloat(parseFloat(amount)+parseFloat(currentAmountOnCheckBox)).toFixed(2) ;
                    //alert(calculateNetAmount);
                });
                //console.log(calculateNetAmount);
                console.log(totalTaxAmount)
                $('#netAmount').val(Number(tamnt)+ Number(calculateNetAmount));
                $('#taxAount').val(totalTaxAmount);
            }
            else
            {
                $('#taxAount').val('0');
            }
            var netamount =$('#netAmount').val();
            var shippingCost = $('#shippingCost').val();
            var discount = $('#discount').val();
            $('#netAmount').val(Number(netamount) +Number(shippingCost)-Number(discount));
            $('#balanceAmount').val(Number($('#netAmount').val()));

        });








    });


    $("#btnAddSale").click(function (e) {

        e.preventDefault();
        var form = $("#purchaseform");

        var datatosend = {
            objquotation: {
                idx: $('#idx').val(),
                qsNumber: $('#qsNumber').val(),
                customerIdx: $('#customerIdx').val(),
                quotationDate: $('#quotationDate').val(),
                description: $('#description').val(),
                totalAmount: $('#totalAmount').val(),
                description: $("#description").val(),
                netAmount: $('#netAmount').val(),
                taxAount:$('#taxAount').val(),                    
                discount:$('#discount').val(),
                shippingCost:$('#shippingCost').val(), 
                reference : $('#reference').val(),
                //salespersonIdx:$('#salespersonIdx').val(),
                //wareHouseIdx:$('#wareHouseIdx option:selected').val(),
                //paymentModeIdx:$('#paymenttype').val(),
                //bankIdx:$('#bankIdx option:selected').val(),
                //accorChequeNumber:$('#accorChequeNumber').val(),

                //PageList:[{ID:1},{ID:2},{ID:3}]
                QuotationDetailLST:[],
                salesTaxesLST:[]
            }

        }
        var table = $("#example2 tbody");

        var milestonearray = [];
        var milestonedetails = {
        };
        var pomasternetamount = 0;
        table.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
                productid = $tds.eq(0).text(),
                qty = $tds.eq(2).find('#qty').val(),
                salePrice = $tds.eq(3).find('#salePrice').val(),
                itemamount = $tds.eq(4).text();

            datatosend.objquotation.QuotationDetailLST.push({
                itemIdx: productid,
                qty: qty,
                salePrice: salePrice,
                productTypeIdx:1,
                amount:itemamount
            })
            ;

        });
        WriteTax(datatosend);





        var form = $("#purchaseform");
        console.log(datatosend)
        $(this).removeData("validator").removeData("unobtrusiveValidation");//remove the form validation
        $.validator.unobtrusive.parse($(this));//add the form validation
        //$.validator.unobtrusive.parse(form);
        //if ($(form).valid()) // using not operator for a time being
        if ($(form).valid())
        {
            $.ajax({
                type : "POST",
                url: "/Quotation/AddUpdate",
                data:JSON.stringify(datatosend),// JSON.stringify(milestonearray),// $(form).serialize(),
                contentType: 'application/json',
                dataType: 'json',
                success: function (res) {
                    console.log(res);
                    if (res.success) {

                        window.location.href = "/Quotation/ViewQuotation"
                    }
                    else if (res.success == false && res.msg == 'Failed') {

                    }
                },
                failure: function (res) {
                    console.log(res);
                },
                err: function (res) {
                    console.log(res);
                }

            })
        }
        else {
            return false;
        }

    });

    function WriteTax(data) {


        var result = $('input[name="tax"]:checked');
        console.log(result);
        if (result.length > 0) {
            result.each(function () {

                var taxid = $(this).attr('data-id');
                var taxPercent = $(this).val();

                data.objquotation.salesTaxesLST.push(
                    {
                        taxIdx: taxid,
                        taxpercent:taxPercent
                    }
                    )
                console.log(data)

            });

        }


    }

    $('#paymenttype').on('change', function () {
        if ( $('#paymenttype option:selected').val()==0) {
            $('#paymntmethodoptions').hide();
            $('#divTxtPaid').hide();
            $('#paidAmount').val('0.00');
        }
        if ($('#paymenttype option:selected').val() == 1 ) {
            $('#paymntmethodoptions').hide();
            $('#divTxtPaid').show();
        }
        if ($('#paymenttype option:selected').val() == 2) {
            $('#paymntmethodoptions').show();
            $('#cheqno').hide();
            $('#divTxtPaid').show();
        }

        if ($('#paymenttype option:selected').val() == 3) {
            $('#paymntmethodoptions').show();
            $('#cheqno').show();
            $('#divTxtPaid').show();
        }
    });
    if($('#paymenttype').val()==0)
    {
        $('#divTxtPaid').hide();
        $('#paidAmount').val('0.00');
    }
    function calculation()
    {
        var tmnt = $('#totalAmount').val('0');
        var table = $("#example2 tbody");
        var calculateNetAmount=0;
        var totalTaxAmount=0;
        var tamnt = $('#netAmount').val('0');
        var grossAmountinInvoice=Number('0');
        table.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
              itemamount = $tds.eq(4).text();

            //console.log(itemamount);
            // itemamount = itemamount + itemamount;
            
            
            tamnt = Number(tamnt) + (Number(itemamount))
            grossAmountinInvoice = Number(grossAmountinInvoice) + (Number(itemamount))

        });
        $('#netAmount').val(grossAmountinInvoice);//Gross Amount Filled
        $('#totalAmount').val(grossAmountinInvoice);
        var result = $('input[name="tax"]:checked');
       
        if (result.length > 0) {
            result.each(function () {
                var amount = parseFloat(parseFloat(calculateNetAmount).toFixed(2));
                var currentPercentage=$(this).val();
                //alert(currentPercentage)
                var currentAmountOnCheckBox =(Number(grossAmountinInvoice)/Number(100))*Number(currentPercentage);
                totalTaxAmount=parseFloat(Number(currentAmountOnCheckBox)+Number(totalTaxAmount)).toFixed(2);
                //alert(currentAmountOnCheckBox);
                calculateNetAmount= parseFloat(parseFloat(amount)+parseFloat(currentAmountOnCheckBox)).toFixed(2) ;
                //alert(calculateNetAmount);
            });
            //console.log(calculateNetAmount);
            console.log(totalTaxAmount);

            $('#totalAmount').val(Number(grossAmountinInvoice)+ Number(totalTaxAmount));
            $('#taxAount').val(totalTaxAmount);
        }
        else
        {
            $('#taxAount').val('0');
        }
      
        var totalAmount =$('#totalAmount').val();
        var shippingCost = $('#shippingCost').val();
        var discount = $('#discount').val();
        $('#totalAmount').val(Number($('#totalAmount').val()) +Number(shippingCost)-Number(discount));
        
    }
 
    </script>
}


