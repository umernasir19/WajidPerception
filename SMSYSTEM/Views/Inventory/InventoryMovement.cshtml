@model SSS.Property.Transactions.ViewModels.LP_Inventory_Movement
@{
    ViewBag.Title = "Inventory Movement";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card-body">
    <h3>Inventory Transfer</h3>
    <br />
    <form role="form" id="purchaseform">
        @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })
        <div class="row">

            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>From Branch*:</label>
                    @Html.DropDownListFor(model => model.FromBranchId, new SelectList(Model.BranchList, "idx", "branchName"), "Select Branch", new { @Class = "form-control font-weight-bold" })
                </div>
                @Html.ValidationMessageFor(model => model.FromBranchId, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>From WareHouse*:</label>
                    <select id="FromWareHouseId" class="form-control font-weight-bold">
                        @{
                            <option value="0" data-hscode="0">Select WareHouse</option>

                            foreach (var item in Model.WareHouseList)
                            {
                                <option value="@item.Idx" data-val="@item.BranchIdx">@item.WareHouseName</option>
                            }

                        }
                    </select>
                </div>
                @Html.ValidationMessageFor(model => model.FromWareHouseId, "", new { @class = "text-danger" })
            </div>

            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Select Product*:</label>
                    @Html.DropDownListFor(model => model.ProdductID, new SelectList(Model.ProductList, "idx", "itemName"), "Select Product", new { @Class = "form-control font-weight-bold" })
                </div>
                @Html.ValidationMessageFor(model => model.ProdductID, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-2">
                <!-- text input -->
                <div class="form-group">
                    <label>Available QTY*:</label>
                    @*<input type="text" id="availableqty"  class="form-control" readonly />*@
                    @Html.EditorFor(model => model.stock, new { htmlAttributes = new { @readonly = "readonly" , @placeholder = "Stock:", @class = "form-control" } })

                </div>
                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-1">
                <!-- text input -->
                <div class="form-group">
                    <label>QTY*:</label>
                    @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @placeholder = "QTY*:", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>TO Branch*:</label>
                    @Html.DropDownListFor(model => model.ToBranchId, new SelectList(Model.BranchList, "idx", "branchName"), "Select Branch Name", new { @Class = "form-control font-weight-bold" })
                </div>
                @Html.ValidationMessageFor(model => model.ToBranchId, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>To WareHouse*:</label>
                    <select id="ToWareHouseID" class="form-control font-weight-bold">
                        @{
                            <option value="0" data-hscode="0">Select WareHouse</option>

                            foreach (var item in Model.WareHouseList)
                            {
                                <option value="@item.Idx" data-val="@item.BranchIdx">@item.WareHouseName</option>
                            }

                        }
                    </select>
                </div>
                @Html.ValidationMessageFor(model => model.ToWareHouseID, "", new { @class = "text-danger" })
            </div>



        </div>
        @*<div class="row" id="PurchaseDetails">
                <div class="col-md-12">
                    <div class="card card-primary">
                        <div class="card-header">
                            <h5>+Add Product</h5>
                            <div class="card-tools">

                            </div>
                        </div>
                        <div class="">
                            <table class="table table-striped table-bordered table-condensed table-hover table-active">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Item Name</th>
                                        <th>QTY</th>

                                        <th>Action</th>
                                    </tr>

                                </thead>
                                <tbody class="" style="background:white;">
                                    <tr>

                                        <td>


                                            <input type="button" value="+" id="btnaddtogrid" class="btn btn-outline-primary" style="font-size: 20px " />

                                        </td>

                                    </tr>

                                </tbody>
                            </table>

                            <div class="row" style="display:block; overflow:scroll" id="milestones">
                                <div class="col-md-12">
                                    <div class="card card-primary">

                                        <div class="">
                                            <table id="example2" class=" table table-dark table-bordered table-hover">

                                                <tbody style="background:white;color:black; ">

                                                    @{
                                                        if (ViewBag.DetailData != null)
                                                        {



                                                            foreach (var items in ViewBag.DetailData)
                                                            {
                                                                <tr>
                                                                    <td style="display:none">@items.itemIdx</td>
                                                                    <td>@items.itemName</td>
                                                                    <td>@items.qty</td>
                                                                    <td><button id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close btn btn-outline-danger"><i class="fa fa-trash menu-icon"></i></button></td>
                                                                </tr>

                                                            }
                                                        }
                                                    }
                                                </tbody>
                                            </table>

                                        </div>

                                        <!-- /.card-body -->
                                    </div>
                                    <!-- /.card -->
                                </div>

                            </div>

                        </div>
                    </div>


                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>*@

        <br />

        <div class="row">


            <div class="col-sm-12">
                <div class="form-group">
                    <label for="inputName">Description</label>
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })
                </div>
            </div>






        </div>
        <div class="row">
            <div class="modal-footer">
                <input type="button" disabled="disabled" class="btn btn-success" id="btnAddMRN" value="Submit" />
              
                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
            </div>
        </div>

    </form>
</div>





@section MyScripts {
    <script type="text/javascript">

        // Validations 
        var qtyval = Number($('#Qty').val());
        var availableqty = Number($('#stock').val());
        if (availableqty < qtyval) {
            alert("False");
        }
        
        // Available quantity based on products
        $("#ProdductID").on('change', function () {
            var productValue = $('#ProdductID').val();
            if (Number(productValue) > 0) {
                $.ajax({
                    url: '/Inventory/SearchAvailableQty',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        id: productValue
                    },
                    success: function (data) {
                        //console.log(data.data[0].price)
                        console.log(data);
                        alert("Done");
                        $("#stock").val(data.data[0].stock);

                    }
                });
            }
            else {
                alert("Fail");
                $("#availableqty").val("0.00");
            }

        });

        var errmsg;
        //Add Project Button Event start
        $("#Qty").keyup(function () {
            var qtyval = Number($('#Qty').val());
            console.log(qtyval);
            var availableqty =Number($('#stock').val());
            console.log(availableqty);
            if (qtyval > availableqty) {
                alert('Available Qty is less than movement Qty');
                $('#btnAddMRN').attr('disabled', true);
                //$('#btnAddMRN').attr('disabled', false);
            }
            else {
                $('#btnAddMRN').attr('disabled', false);
            }
     
        });

        $("#ToWareHouseID").change(function () {
            var toId = $('#ToWareHouseID option:selected').val();
            var fromId = $('#FromWareHouseId option:selected').val();
           
            
            if (fromId == toId) {
                alert('Warehouse can not be same');
                $('#btnAddMRN').attr('disabled', true);
               
            }
            else {
                $('#btnAddMRN').attr('disabled', false);
            }

        });

        $("#FromWareHouseId").change(function () {
            var toId = $('#ToWareHouseID option:selected').val();
            var fromId = $('#FromWareHouseId option:selected').val();


            if (fromId == toId) {
                alert('Warehouse can not be same');
                $('#btnAddMRN').attr('disabled', true);

            }
            else {
                $('#btnAddMRN').attr('disabled', false);
            }

        });





        $("#btnaddtogrid").click(function (e) {
            if (!(gridValidation($("#itemIdx option:selected").val()))) {
                // alert("Product Alreaty Exist")
                displayerror();
                return;
            }


            // alert("hello");
            $('#milestones').show();
            var closebutton = '<button id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close btn btn-outline-danger"><i class="fa fa-trash menu-icon"></i></button>';
            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
            //'<span aria-hidden="true" styel="color:red">&times;</span>' +
            // '</button>'
            var productname = $("#itemIdx option:selected").text();
            var ProductID = $("#itemIdx option:selected").val();
            var Qty = $("#qty").val();
            //var unitprice = $("#unitPrice").val();
            //var totalamount = $("#amount").val();
            //var duedate = $("#DueDate").val();
            var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + closebutton + "</td></tr>";
            //if (milestone == "") {
            //    alert("Enter milestone");
            //    return;
            //} else {

            $("#example2 tbody").append(markup);
            var tamount = 0;



        });
        $('#mrnDate').change(function () {
            var date = $(this).val();
            console.log(date, 'change')
            var GivenDate = date;
            var CurrentDate = new Date();
            GivenDate = new Date(GivenDate);

            if (GivenDate > CurrentDate) {
                alert('Given date is greater than the current date.');
                var today = moment().format('YYYY-MM-DD');
                $('#mrnDate').val(today);
            } else {
                // alert('Given date is not greater than the current date.');
            }
        });
        function SomeDeleteRowFunction(o) {
            //alert(id);
            var $row = $(this).closest("tr"),        // Finds the closest row <tr>
                 $tds = $row.find("td:nth-child(2)");
            console.log($tds);

            $.each($tds, function () {                // Visits every single <td> element
                console.log($(this).text());         // Prints out the text within the <td>
            });


            var p = o.parentNode.parentNode;

            p.parentNode.removeChild(p);
            $(this).closest('tr').remove();


        };

        function gridValidation() {
            errmsg = [];
            
            var rtrn = true;

            
            if ($('#ProdductID option:selected').val() == '') {
                rtrn = false;
                errmsg.push("Select Product");
            }
            var availableQty = $('#stock');
            var qty = $('#Qty');
            if ($('#Qty').val() <= 0) {
                rtrn = false;
                errmsg.push("Qty value is zero");
            }
            if (availableQty < qty) {
                rtrn = false;
                errmsg.push("Selected quantity is not available");
            }

           
            return rtrn;
        }

        function displayerror() {
            for (var i = 0; i < errmsg.length; i++) {
                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-top-center",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }
                Command: toastr["error"](errmsg[i], "")
            }
        }

        $('#FromBranchId').change(function () {

            $('#FromWareHouseId').attr('display', 'block')
            // get optios of second dropdown and cache it
            var $options = $('#FromWareHouseId')
              // update the dropdown value if necessary
              .val('')
              // get options
              .find('option')
              // show all of the initially
              .show();
            console.log($options);
            // check current value is not 0
            if (this.value != '0')
                $options
                // filter out options which is not corresponds to the first option
                .not('[data-val="' + this.value + '"],[data-val=""]')
                // hide them
                .hide();
        })
        $('#ToBranchId').change(function () {
            // get optios of second dropdown and cache it
            var $options = $('#ToWareHouseID')
              // update the dropdown value if necessary
              .val('')
              // get options
              .find('option')
              // show all of the initially
              .show();
            console.log($options);
            // check current value is not 0
            if (this.value != '0')
                $options
                // filter out options which is not corresponds to the first option
                .not('[data-val="' + this.value + '"],[data-val=""]')
                // hide them
                .hide();
        })

        $('#ProdductID').change(function () {
            var pid = $('#ProdductID option:selected').val();
            var datatosend = {
                objrprtparam: {
                    branchid: $('#FromBranchId').val(),
                    productid: $('#ProdductID option:selected').val(),
                    WareHouseId: $('#FromWareHouseId option:selected').val()
                 
                   
                }

            }
           
            var form = $("#reportform");
            // $.post("/Inventory/GenerateDetailReport", $(form).serialize());
            // $.validator.unobtrusive.parse(form);
            // if ($(form).valid()){
            console.log("here1");
            console.log(datatosend);
            if (true) {
                $.ajax({
                    type: "POST",
                    url: "/Inventory/GetInventoryInfo",
                    data: datatosend,// $(form).serialize(),
                    //contentType: 'application/json',
                    //dataType: 'json',
                    success: function (res) {
                        console.log(res);
                        if (res.success) {
                            $('#availableqty').val(res.data)
                            //window.location.href = "/Inventory/Download?fpath=" + res.data;
                        }
                        else if (res.success == false && res.msg == 'Failed') {

                        }
                    },
                    failure: function (res) {
                        console.log(res);
                    },
                    err: function (res) {
                        console.log(res);
                    }

                })
            }
            else {
                return false;
            }

        });

        $("#btnAddMRN").click(function (e) {
           
                console.log("here");
            e.preventDefault();

            var quantity = $('#Qty').val();
            var datatosend = {
                objINV: {
                    FromBranchId: $('#FromBranchId option:selected').val(),
                    FromWareHouseId: $('#FromWareHouseId option:selected').val(),
                    ToBranchId: $('#ToBranchId option:selected').val(),
                    ToWareHouseID: $('#ToWareHouseID option:selected').val(),
                    Description: $('#Description').val(),
                    ProdductID: $('#ProdductID option:selected').val(),
                    Qty: $('#Qty').val(),
                    
                    //WarerHouseID: $('#WarerHouseID').val(),
                    //PageList:[{ID:1},{ID:2},{ID:3}]
                    InventoryLogs: []
                }

            }
            //transfer In
            datatosend.objINV.InventoryLogs.push({
                productIdx: $('#ProdductID option:selected').val(),
                stock: (quantity) * (-1),
                unitPrice: 1,
                TransactionTypeID: 20,
                MasterID: 0,
                BRANCHID: $('#FromBranchId option:selected').val(),
                    wareHouseIdx:$('#FromWareHouseId option:selected').val()
            });
            datatosend.objINV.InventoryLogs.push({
                productIdx: $('#ProdductID option:selected').val(),
                stock: quantity,
                unitPrice: 1,
                TransactionTypeID: 30,
                MasterID: 0,
                BRANCHID: $('#ToBranchId option:selected').val(),
                wareHouseIdx: $('#ToWareHouseID option:selected').val()
            });





            //});
            //console.log(milestonearray);
            var form = $("#purchaseform");

            // $.validator.unobtrusive.parse(form);
            // if ($(form).valid()){
            console.log("here1");
            if (true) {
                $.ajax({
                    type: "POST",
                    url: "/Inventory/TransferInventory",
                    data: JSON.stringify(datatosend),// $(form).serialize(),
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (res) {
                        console.log(res);
                        if (res.success) {
                            alert("Movement Completed");
                            window.location.href = "/Inventory/InventoryMovement/"
                        }
                        else if (res.success == false && res.msg == 'Failed') {

                        }
                    },
                    failure: function (res) {
                        console.log(res);
                    },
                    err: function (res) {
                        console.log(res);
                    }

                })
            }
            else {
                return false;
            }
            
        });
    </script>
}