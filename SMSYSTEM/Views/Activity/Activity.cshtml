@model SSS.Property.Transactions.LP_Activity_Property
@{
    ViewBag.Title = "Activity";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card-body">
    <h3><b>Production</b></h3>
    <br />
    <form role="form" id="purchaseform">
        @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })
        <div class="row">
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Reference:</label>
                    @{
                        if (Model.idx > 0)
                        {
                            @Html.DropDownListFor(model => model.typeIdx, new List<SelectListItem>
               {
                   new SelectListItem {Text="Select Type",Value="0" },
                  new SelectListItem {Text=" Sales Order",Value="1" },
                  new SelectListItem {Text="Display Order",Value="2" }
               }, new { @class = "select2 form-control" })
                         
                        }
                        else
                        {
                            @Html.DropDownListFor(model => model.typeIdx, new List<SelectListItem>
               {
                   new SelectListItem {Text="Select Type",Value="0" },
                  new SelectListItem {Text=" Sales Order",Value="1" },
                  new SelectListItem {Text="Display Order",Value="2" }
               }, new { @class = "select2 form-control" })
                        }
                    }
                   
                </div>
                @Html.ValidationMessageFor(model => model.typeIdx, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            @{
                if (Model.idx > 0)
                {
                    <div class="form-group" style="display: none;">
                        <label>Order#:</label>

                        @*@Html.DropDownListFor(m => m.orderIdx,
                            new SelectList(Enumerable.Empty<SelectListItem>(), "idx", "soNumber"),
                            "Select Order",
                            new { @class = "select2 form-control" })*@

                        @Html.EditorFor(model => model.orderIdx, new { htmlAttributes = new { @placeholder = "Delivery Date*:", @class = "form-control" } })


                        @Html.ValidationMessageFor(m => m.orderIdx, "", new { @class = "text-danger" })
                    </div>
                }
                else
                {
                    <div class="col-sm-3 " id="ddlOrder">
                        <!-- text input -->
                        <div class="form-group">
                            <label>Order#:</label>

                            @Html.DropDownListFor(m => m.orderIdx,
                                new SelectList(Enumerable.Empty<SelectListItem>(), "idx", "soNumber"),
                                "Select Order",
                                new { @class = "select2 form-control" })



                            @Html.ValidationMessageFor(m => m.orderIdx, "", new { @class = "text-danger" })
                        </div>

                    </div>
                }
            }

            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Product#:</label>
                    @Html.DropDownListFor(m => m.productIdx,
       new SelectList(Enumerable.Empty<SelectListItem>(), "itemIdx", "itemName"),
              "Select Product",
              new { @class = "select2 form-control" })
                    @Html.ValidationMessageFor(m => m.productIdx, "", new { @class = "text-danger" })
                </div>
                @*@Html.ValidationMessageFor(model => model.productIdx, "", new { @class = "text-danger" })*@
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Process*:</label>
                    @Html.DropDownListFor(model => model.vendorCatIdx, new SelectList(Model.vendorCatLST, "idx", "VendorCategory"), "Select Category", new { @Class = "form-control select2 font-weight-bold" })
                </div>
                @Html.ValidationMessageFor(model => model.vendorCatIdx, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Vendor*:</label>
                    @{
                        if (Model.ActivityDetailLST.Count > 0)
                        {
                            @Html.DropDownListFor(model => model.vendorIdx, new SelectList(Model.vendorLST, "idx", "vendorName"), "Select Category", new { @Class = "form-control select2 font-weight-bold" })

                        }
                        else
                        {
                            @Html.DropDownListFor(m => m.vendorIdx,
       new SelectList(Enumerable.Empty<SelectListItem>(), "idx", "vendorName"),
              "Select Vendor",
              new { @class = "select2 form-control" })
                        }
                    }

                    @Html.ValidationMessageFor(m => m.vendorIdx, "", new { @class = "text-danger" })
                </div>
                @*@Html.ValidationMessageFor(model => model.vendorIdx, "", new { @class = "text-danger" })*@
            </div>
            
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Delivery Date*:</label>
                    @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @placeholder = "Delivery Date*:", @class = "form-control" } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.DeliveryDate, "", new { @class = "text-danger" })
            </div>

        </div>
        <div class="row">
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Reference:</label>
                    @Html.EditorFor(model => model.reference, new { htmlAttributes = new { @placeholder = "Reference:", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.reference, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Size:</label>
                    @Html.EditorFor(model => model.size, new { htmlAttributes = new { @placeholder = "Size:", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.size, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Qty:</label>
                    @Html.EditorFor(model => model.qty, new { htmlAttributes = new { @placeholder = "Quantity:", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.qty, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Price:</label>
                    @Html.EditorFor(model => model.activityPrice, new { htmlAttributes = new { @placeholder = "Price:", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.activityPrice, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-sm-11">
                <!-- text input -->
                <div class="form-group">
                    <label>Description:</label>
                    @Html.EditorFor(model => model.description, new { htmlAttributes = new { @placeholder = "Description:", @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-1">
                <div class="form-group">
                    <br />
                    <input type="button" value="+" id="btnaddtogrid" class="btn btn-outline-primary" style="font-size: 20px " />
                </div>
            </div>
        </div>
        <div class="row" style="display:block; overflow:scroll" id="milestones">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="">
                        <table id="example2" class=" table table-dark table-bordered table-hover">
                            <thead class="thead-dark">
                            <tr>
                             
                                <th>Product Name</th>
                                <th>Reference</th>
                                <th>Size</th>
                                <th>Qty</th>
                                <th>Price</th>
                                <th>Description</th>
                                <th style="display: none">Process</th>
                                <th style="display: none">Vendor</th>
                                <th>Total Price</th>
                                <th>Actions</th>
                            </tr>
                            </thead>
                            <tbody style="background:white;color:black; ">
                                @{
                                    if (Model.ActivityDetailLST.Count > 0)
                                    {



                                        for (int i = 0; i < Model.ActivityDetailLST.Count; i++)
                                        {
                                            <tr>
                                                <td style="display:none">@Model.ActivityDetailLST[i].productIdx</td>
                                                <td>@Model.productLST.Where(p => p.idx == Model.ActivityDetailLST[i].productIdx).Select(p => p.itemName).FirstOrDefault()</td>
                                                <td>@Model.ActivityDetailLST[i].reference</td>
                                                <td>@Model.ActivityDetailLST[i].size</td>
                                                <td>@Model.ActivityDetailLST[i].qty</td>
                                                <td>@Model.ActivityDetailLST[i].activityPrice</td>
                                                <td>@Model.ActivityDetailLST[i].description</td>
                                                <td style="display: none">@Model.ActivityDetailLST[i].vendorCatIdx</td>
                                                <td style="display: none">@Model.ActivityDetailLST[i].vendorIdx</td>
                                                <td id="Price">@Model.ActivityDetailLST[i].Price</td>


                                                <td><button id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close btn btn-outline-danger"><i class="fa fa-trash menu-icon"></i></button></td>
                                            </tr>

                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>
        </div>

        <hr />
    <div class="row">
        <div class="col-sm-4">
            <!-- text input -->
            <div class="form-group">
                <label>Total Price:</label>
                @Html.EditorFor(model => model.TotalPrice, new { htmlAttributes = new { @placeholder = "Total Price:", @class = "form-control" } })
            </div>
            @Html.ValidationMessageFor(model => model.TotalPrice, "", new { @class = "text-danger" })
        </div>
    </div>
        <div class="row">
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="btnAddSale">Submit</button>
                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </form>
</div>

@section MyScripts
{
    
    

    <script type="text/javascript">
        $(".select2").select2({ width: '100%', placeholder: "Select an Option", allowClear: true});
        $(document).ready(function() {

            $('#ddlOrder').hide();
            $('#typeIdx').trigger("change");
            //alert(update);
            checkUpdate();
            if (@Model.idx > 0) {
                var id = $("#orderIdx").val();
                //alert(id);

                var orderId = id
                    var typeId = $("#typeIdx option:selected").val();
                    if (orderId > 0 && typeId == 1) {
                        $.ajax({
                            url: '/Activity/SearchProductsInDetail',
                            type: "GET",
                            dataType: "JSON",
                            data: {
                                Id: orderId
                            },
                            success: function(data) {

                                $("#productIdx").html(""); // clear before appending new list
                                $('#productIdx').append($('<option>',
                                    {
                                        value: "",
                                        text: "Select Products"
                                    }));

                                console.log(data.data);
                                $.each(data.data,
                                    function(key, value) {
                                        $('#productIdx').append($('<option>',
                                            {
                                                value: value.itemIdx,
                                                text: value.itemName
                                            }));


                                    });


                            }
                        });
                    } else if (orderId > 0 && typeId == 2) {
                        $.ajax({
                            url: '/Activity/SearchProductsInDODetail',
                            type: "GET",
                            dataType: "JSON",
                            data: {
                                Id: orderId
                            },
                            success: function(data) {

                                $("#productIdx").html(""); // clear before appending new list
                                //var invoicData = JSON.parse(data.data)
                                //allInvoice = { invoicData };

                                $('#productIdx').append($('<option>',
                                    {
                                        value: "",
                                        text: "Select Products"
                                    }));

                                console.log(data.data);
                                $.each(data.data,
                                    function(key, value) {
                                        $('#productIdx').append($('<option>',
                                            {
                                                value: value.itemIdx,
                                                text: value.itemName
                                            }));


                                    });


                            }
                        });

                    } else {

                        $("#productIdx").empty();
                        $("#productIdx").append($('<option>',
                            {
                                value: "",
                                text: "Select Product"
                            }));

                    }


                }
            

        });

        // Check Update
        function checkUpdate() {
            var number = @ViewBag.update;

           // alert(number);
            if (number == 1) {
                if (@Model.ActivityDetailLST.Count > 0) {

                    // alert(Model.ActivityDetailLST.Count);
                    @*document.getElementById('typeIdx').value=@Model.ActivityDetailLST[0].typeIdx;
                    $('#typeIdx').trigger("change");
                    document.getElementById('typeIdx').value=@Model.ActivityDetailLST[0].typeIdx;


                    var orderid=@Model.ActivityDetailLST[0].orderIdx;

                    SearchProductsInDetail(orderid);*@


                    // $('#orderIdx').trigger("change");
                }
            }

            @*alert(@Model.ActivityDetailLST.Count);
            var c=@Model.ActivityDetailLST.Count
                console.log(@Model.ActivityDetailLST.Count);*@

        }

        // Price
        $("#vendorIdx").on('change',
            function() {
                var vendorValue = $('#vendorIdx').val();
                if (Number(vendorValue) > 0) {
                    $.ajax({
                        url: '/Activity/SearchPrice',
                        type: "GET",
                        dataType: "JSON",
                        data: {
                            id: vendorValue
                        },
                        success: function(data) {
                            //console.log(data.data[0].price)
                            $("#activityPrice").val(data.data[0].price);

                        }
                    });
                } else {
                    $("#activityPrice").val("0.00");
                }

            });
        $("#typeIdx").on('change',
            function() {
                var value = $("#typeIdx option:selected").val();
                if (value == 1) {
                    $.getJSON("@Url.Action("getSalesOrders", "Activity")",
                        null,
                        function(data) {

                            $("#orderIdx").empty();
                            $("#ddlOrder").show();
                            $('#orderIdx').append($('<option>',
                                {
                                    value: "",
                                    text: "Select Order"
                                }));
                            for (var i = 0; i < data.data.length; i++) {

                                // if(Model.ActivityDetailLST.Count>0){
                                @*var orderid=@Model.ActivityDetailLST[0].orderIdx;
                                   var select='';
                                   if(orderid==data.data[i].idx){
                                       $("#orderIdx").html("");
                                       selection='Selected'
                                       $('#orderIdx').append($('<option>'+selection +' ' ,
                                          {
                                              value: data.data[i].idx,
                                              text: data.data[i].soNumber
                                          }));
                                   }
                                   else{

                                   }*@


                                // }else{
                                $('#orderIdx').append($('<option>',
                                    {
                                        value: data.data[i].idx,
                                        text: data.data[i].soNumber
                                    }));
                                //}

                            }


                        });
                } else if (value == 2) {
                    $.getJSON("@Url.Action("getDisplayOrder", "Activity")",
                        null,
                        function(data) {

                            $("#orderIdx").empty();
                            $("#ddlOrder").show();
                            $('#orderIdx').append($('<option>',
                                {
                                    value: "",
                                    text: "Select Order"
                                }));
                            for (var i = 0; i < data.data.length; i++) {

                                // if(@Model.ActivityDetailLST.Count>0)
                                // {

                                @*var orderid=@Model.ActivityDetailLST[0].orderIdx;
                                   var select='';
                                   if(orderid==data.data[i].idx){
                                       $("#orderIdx").html("");
                                       selection='Selected'
                                       $('#orderIdx').append($('<option> selected="selected" ' ,
                                            {
                                                value: data.data[i].idx,
                                                text: data.data[i].doNumber
                                            }));

                                   }
                                   else
                                   {

                                   }*@
                                // }
                                // else{
                                $('#orderIdx').append($('<option>',
                                    {
                                        value: data.data[i].idx,
                                        text: data.data[i].doNumber
                                    }));
                                //}
                            }


                        });
                } else {
                    $("#orderIdx").html("");

                    $('#orderIdx').append($('<option>',
                        {
                            value: "",
                            text: "Select Order"
                        }));
                    $('#ddlOrder').hide();
                }

            });
        var allInvoiceDetails = {};

        function SearchProductsInDetail(orderid) {

            var orderId = orderid
            var typeId = $("#typeIdx option:selected").val();
            if (orderId > 0 && typeId == 1) {
                $.ajax({
                    url: '/Activity/SearchProductsInDetail',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        Id: orderId
                    },
                    success: function(data) {

                        $("#productIdx").html(""); // clear before appending new list
                        $('#productIdx').append($('<option>',
                            {
                                value: "",
                                text: "Select Products"
                            }));

                        console.log(data.data);
                        $.each(data.data,
                            function(key, value) {
                                $('#productIdx').append($('<option>',
                                    {
                                        value: value.itemIdx,
                                        text: value.itemName
                                    }));


                            });


                    }
                });
            } else if (orderId > 0 && typeId == 2) {
                $.ajax({
                    url: '/Activity/SearchProductsInDODetail',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        Id: orderId
                    },
                    success: function(data) {

                        $("#productIdx").html(""); // clear before appending new list
                        //var invoicData = JSON.parse(data.data)
                        //allInvoice = { invoicData };

                        $('#productIdx').append($('<option>',
                            {
                                value: "",
                                text: "Select Products"
                            }));

                        console.log(data.data);
                        $.each(data.data,
                            function(key, value) {
                                $('#productIdx').append($('<option>',
                                    {
                                        value: value.itemIdx,
                                        text: value.itemName
                                    }));


                            });


                    }
                });

            } else {

                $("#productIdx").empty();
                $("#productIdx").append($('<option>',
                    {
                        value: "",
                        text: "Select Product"
                    }));

            }


        }

        $("#orderIdx").on('change',
            function() {
                var orderId = $("#orderIdx option:selected").val();
                var typeId = $("#typeIdx option:selected").val();
                if (orderId > 0 && typeId == 1) {
                    $.ajax({
                        url: '/Activity/SearchProductsInDetail',
                        type: "GET",
                        dataType: "JSON",
                        data: {
                            Id: orderId
                        },
                        success: function(data) {

                            $("#productIdx").html(""); // clear before appending new list
                            $('#productIdx').append($('<option>',
                                {
                                    value: "",
                                    text: "Select Products"
                                }));

                            console.log(data.data);
                            $.each(data.data,
                                function(key, value) {
                                    $('#productIdx').append($('<option>',
                                        {
                                            value: value.itemIdx,
                                            text: value.itemName
                                        }));


                                });


                        }
                    });
                } else if (orderId > 0 && typeId == 2) {
                    $.ajax({
                        url: '/Activity/SearchProductsInDODetail',
                        type: "GET",
                        dataType: "JSON",
                        data: {
                            Id: orderId
                        },
                        success: function(data) {

                            $("#productIdx").html(""); // clear before appending new list
                            //var invoicData = JSON.parse(data.data)
                            //allInvoice = { invoicData };

                            $('#productIdx').append($('<option>',
                                {
                                    value: "",
                                    text: "Select Products"
                                }));

                            console.log(data.data);
                            $.each(data.data,
                                function(key, value) {
                                    $('#productIdx').append($('<option>',
                                        {
                                            value: value.itemIdx,
                                            text: value.itemName
                                        }));


                                });


                        }
                    });

                } else {

                    $("#productIdx").empty();
                    $("#productIdx").append($('<option>',
                        {
                            value: "",
                            text: "Select Product"
                        }));

                }

            });

        function changeorderid() {

            var orderId = $("#orderIdx option:selected").val();
            var typeId = $("#typeIdx option:selected").val();
            if (orderId > 0 && typeId == 1) {
                $.ajax({
                    url: '/Activity/SearchProductsInDetail',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        Id: orderId
                    },
                    success: function(data) {

                        $("#productIdx").html(""); // clear before appending new list
                        $('#productIdx').append($('<option>',
                            {
                                value: "",
                                text: "Select Products"
                            }));

                        console.log(data.data);
                        $.each(data.data,
                            function(key, value) {
                                $('#productIdx').append($('<option>',
                                    {
                                        value: value.itemIdx,
                                        text: value.itemName
                                    }));


                            });


                    }
                });
            } else if (orderId > 0 && typeId == 2) {
                $.ajax({
                    url: '/Activity/SearchProductsInDODetail',
                    type: "GET",
                    dataType: "JSON",
                    data: {
                        Id: orderId
                    },
                    success: function(data) {

                        $("#productIdx").html(""); // clear before appending new list
                        //var invoicData = JSON.parse(data.data)
                        //allInvoice = { invoicData };

                        $('#productIdx').append($('<option>',
                            {
                                value: "",
                                text: "Select Products"
                            }));

                        console.log(data.data);
                        $.each(data.data,
                            function(key, value) {
                                $('#productIdx').append($('<option>',
                                    {
                                        value: value.itemIdx,
                                        text: value.itemName
                                    }));


                            });


                    }
                });

            } else {

                $("#productIdx").empty();
                $("#productIdx").append($('<option>',
                    {
                        value: "",
                        text: "Select Product"
                    }));

            }


        }

        $("#vendorCatIdx").on('change',
            function() {
                var vendorId = $("#vendorCatIdx option:selected").val();
                if (vendorId > 0) {
                    $.ajax({
                        url: '/Activity/SearchVendorsOnCatIdx',
                        type: "GET",
                        dataType: "JSON",
                        data: {
                            Id: vendorId
                        },
                        success: function(data) {

                            $("#vendorIdx").html(""); // clear before appending new list


                            $('#vendorIdx').append($('<option>',
                                {
                                    value: "",
                                    text: "Select Vendor"
                                }));

                            $.each(data.data,
                                function(key, value) {
                                    $('#vendorIdx').append($('<option>',
                                        {
                                            value: value.idx,
                                            text: value.vendorName
                                        }));


                                });


                        }
                    });
                } else {

                    $("#vendorIdx").empty();
                    $("#vendorIdx").append($('<option>',
                        {
                            value: "",
                            text: "Select Vendor"
                        }));

                }

            });

        function displayerror() {
            for (var i = 0; i < errmsg.length; i++) {
                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-top-center",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }
                Command: toastr["error"](errmsg[i], "")
            }
        }

        $("#btnAddSale").click(function(e) {

            e.preventDefault();
            var form = $("#purchaseform");
            console.log($('#activityPrice').val());
            console.log($('#size').val())
            var datatosend = {
                objVoucher: {
                    idx: $('#idx').val(),
                    reference: $('#reference').val(),
                    orderIdx: $('#orderIdx').val(),
                    typeIdx: $('#typeIdx option:selected').val(),
                    productIdx: $('#productIdx').val(),
                    vendorCatIdx: $('#vendorCatIdx').val(),
                    vendorIdx: $('#vendorIdx').val(),
                    activityPrice: $('#activityPrice').val(),
                    qty: $('#qty').val(),
                    size: $('#size').val(),
                    description: $("#description").val(),
                    DeliveryDate: $("#DeliveryDate").val(),
                    TotalPrice:  $("#TotalPrice").val(),
                    ActivityDetailLST: []

                }

            }
            var table = $("#example2 tbody");

            var milestonearray = [];
            var milestonedetails = {
            };
            var pomasternetamount = 0;
            var tamnt = 0;
            table.find('tr').each(function(i) {
                var $tds = $(this).find('td'),
                    productid = $tds.eq(0).text(),
                    reference = $tds.eq(2).text(),
                    size = $tds.eq(3).text(),
                    qty = $tds.eq(4).text(),
                    activityPrice = $tds.eq(5).text(),
                    description = $tds.eq(6).text(),
                    vendorCatIdx = $tds.eq(7).text(),
                    vendorIdx =  $tds.eq(8).text(),
                    totalAmount = qty * activityPrice,
                    itemamount = $tds.eq(9).text()
                 
                
                //console.log(itemamount);
                // itemamount = itemamount + itemamount;

                datatosend.objVoucher.ActivityDetailLST.push({
                    productIdx: productid,
                    reference: reference,
                    size: size,
                    qty: qty,
                    activityPrice: activityPrice,
                    description: description,
                    totalAmount,
                    totalAmount,
                    vendorCatIdx : vendorCatIdx,
                    vendorIdx:vendorIdx,
                    Price: totalAmount,
                    TotalPrice:  $("#TotalPrice").val()
                });
                
            

            });

            console.log(JSON.stringify(datatosend));


            var form = $("#purchaseform");
            console.log(datatosend)
            $(this).removeData("validator").removeData("unobtrusiveValidation"); //remove the form validation
            $.validator.unobtrusive.parse($(this)); //add the form validation
            //$.validator.unobtrusive.parse(form);
            //if ($(form).valid()) // using not operator for a time being
            if ($(form).valid()) {
                $.ajax({
                    type: "POST",
                    url: "/Activity/AddUpdate",
                    data: JSON.stringify(datatosend), // JSON.stringify(milestonearray),// $(form).serialize(),
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function(res) {
                        console.log(res);
                        if (res.success) {

                            window.location.href = "/Activity/Activity"
                        } else if (res.success == false && res.msg == 'Failed') {

                        }
                    },
                    failure: function(res) {
                        console.log(res);
                    },
                    err: function(res) {
                        console.log(res);
                    }

                })
            } else {
                return false;
            }

        });

        var errmsg;
        //Add Project Button Event start.
        var tamnt = 0;
        // Add to Grid Button
        
                tamnt = @Model.TotalPrice;
       
        $("#btnaddtogrid").click(function(e) {
            if (!(gridValidation($("#productIdx option:selected").val(), $('#vendorIdx').val(), $('#vendorCatIdx').val()))) {

                displayerror();
                return;
            }


            // alert("hello");
            $('#milestones').show();

            //var actualQty = $("#qty").val();
            var closebutton = '<button id="deleterow" onclick="SomeDeleteRowFunction(this)"  class="close btn "><i class="fa fa-trash menu-icon"></i></button>';
            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
            //'<span aria-hidden="true" styel="color:red">&times;</span>' +
            // '</button>'
            var productname = $("#productIdx option:selected").text();
            var ProductID = $("#productIdx option:selected").val();
            var vendorCatIdx = $("#vendorCatIdx option:selected").val();
            var vendorIdx = $("#vendorIdx option:selected").val();
            var reference = $('#reference').val();
            var size = $('#size').val();
            //var Qty = '<input type="text" placeholder="Enter Sales Price" onkeyup="changeinunitprice(this)" value="' + actualQty + '"  id="qty" class="form-control" />';
            var Qty = $('#qty').val();
            var activityPrice = $('#activityPrice').val();
            var description = $('#description').val();
            var Price = Number(Qty) * Number(activityPrice);
            var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + reference + "</td><td>" + size + "</td><td>" + Qty + "</td><td>" + activityPrice + "</td><td>" + description + "</td><td style='display:none;'>" + vendorCatIdx + "</td><td style='display:none;'>" + vendorIdx + "</td><td id='Price'>" + Price + "</td><td>"+ closebutton + "</td></tr>";
            var price = $('#Price').val();
            tamnt = Number(tamnt) + (Number(Price));
            
            //var temp =Number(temp) + Number(tamnt);
            ////grossAmountinInvoice = Number(grossAmountinInvoice) + (Number(totalAmount))
            //alert(temp);
            
            $("#TotalPrice").val(tamnt);
            $("#example2 tbody").append(markup);
            $("#typeIdx").prop('disabled', true); //disable
            $("#orderIdx").prop('disabled', true); //disable
            $("#vendorCatIdx").prop('disabled', false); //disable
            $("#vendorIdx").prop('disabled', false); //disable


        });


        $('#orderDate').change(function() {
            var date = $(this).val();
            console.log(date, 'change')
            var GivenDate = date;
            var CurrentDate = new Date();
            GivenDate = new Date(GivenDate);

            if (GivenDate > CurrentDate) {
                alert('Given date is greater than the current date.');
                var today = moment().format('YYYY-MM-DD');
                $('#orderDate').val(today);
            } else {
                // alert('Given date is not greater than the current date.');
            }
        });

        function SomeDeleteRowFunction(o) {
            //alert(id);
            var $row = $(this).closest("tr"), // Finds the closest row <tr>
                $tds = $row.find("td:nth-child(2)");
            //console.log($tds);

            $.each($tds,
                function() { // Visits every single <td> element
                    // console.log($(this).text());         // Prints out the text within the <td>
                });
            var itmmant = o.parentNode.parentNode.children[4].innerText;
            var tmnt = $('#totalAmount').val();

            tmnt = tmnt - itmmant;
            $('#totalAmount').val(tmnt);
            $('#netAmount').val(tmnt);
            // $('#balanceAmount').val(tmnt);
            var p = o.parentNode.parentNode;

            p.parentNode.removeChild(p);
            $(this).closest('tr').remove();
            var rowCount = $('#example2 tr').length;

            if (Number(rowCount - 1) == 0) {
                $("#typeIdx").prop('disabled', false); //enable
                $("#orderIdx").prop('disabled', false); //enable
                $("#vendorCatIdx").prop('disabled', false); //enable
                $("#vendorIdx").prop('disabled', false); //enable
            }

        };


        // Grid Validations
        function gridValidation(Id, vendorId, processId) {
            errmsg = [];
            var myTab = $("#example2 tbody");
            var rtrn = true;

            // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
            myTab.find('tr').each(function(i) {
                //var processIdx = $('#vendorCatIdx').val();
                //var vendorIdx = $('#vendorIdx').val();
                var $tds = $(this).find('td'),
                    productid = $tds.eq(0).text();
                processIdx = $tds.eq(7).text();
                vendorIdx = $tds.eq(8).text();
                if (Id == productid && processId == processIdx && vendorId == vendorIdx) {
                    rtrn = false;
                    errmsg.push("Product With Same Process and Vendor Already exist");
                }
            })
            if ($('#productIdx option:selected').val() == '') {
                rtrn = false;
                errmsg.push("Select Product");
            }
            if ($('#qty').val() <= 0) {
                rtrn = false;
                errmsg.push("Qty value is zero");
            }
            if ($('#activityPrice').val() <= 0) {
                rtrn = false;
                errmsg.push("Price value is zero");
            }


            return rtrn;
        }


    </script>
}



