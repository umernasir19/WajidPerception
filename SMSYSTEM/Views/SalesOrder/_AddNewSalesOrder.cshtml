
@model SSS.Property.Setups.SalesOrderVM_Property
@{
    Layout = null;
}
<div class="card-body">
    <form role="form" id="purchaseform">
        @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })


        <div class="row">

            @{
                if (Model.idx > 0)
                {

                }
                else
                {
                    <div class="col-sm-3">
                        <!-- text input -->

                        <div class="form-group">
                            <label>MR*:</label>

                            @Html.DropDownListFor(model => model.qsIdx, new SelectList(Model.QSList, "idx", "qsNumber"), "Select Quotation", new { @Class = "form-control font-weight-bold" })

                        </div>
                        @Html.ValidationMessageFor(model => model.qsIdx, "", new { @class = "text-danger" })
                    </div>
                }
            }
        </div>
        <div class="row">
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Vendor*:</label>

                    @Html.DropDownListFor(model => model.customerIdx, new SelectList(Model.CustomerLST, "idx", "customerName"), "Select Customers", new { @Class = "form-control font-weight-bold" })

                </div>
                @Html.ValidationMessageFor(model => model.customerIdx, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>PO Number*:</label>
                    @Html.EditorFor(model => model.soNumber, new { htmlAttributes = new { @placeholder = "SO Number*:", @class = "form-control", @readonly = true } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.soNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Purchase Date*:</label>
                    @Html.EditorFor(model => model.salesorderDate, new { htmlAttributes = new { @placeholder = "Sales Order Date*:", @class = "form-control" } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.salesorderDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        <div class="row" id="PurchaseDetails">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header" style="background-color:rgb(43, 174, 240);">
                        <h3 class="card-title" style=" color:white">Sales Order Details</h3>
                        <div class="card-tools">

                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="row">
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputName">Item Name</label>

                                            @Html.DropDownListFor(model => model.itemIdx, new SelectList(Model.ProductList, "idx", "itemName"), "Select Product", new { @Class = "form-control font-weight-bold" })

                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">Weight(KG)/Qty</label>
                                            @Html.EditorFor(model => model.qty, new { htmlAttributes = new { @placeholder = "Qty", @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">Sales Rate</label>
                                            @Html.EditorFor(model => model.salePrice, new { htmlAttributes = new { @placeholder = "Unit Price", @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">Total Price</label>
                                            @Html.EditorFor(model => model.amount, new { htmlAttributes = new { @placeholder = "Total Price", @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">Action</label>
                                            <input type="button" class="btn btn-primary form-control" value="Add Item" id="btnaddtogrid" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style="display:block; overflow:scroll" id="milestones">
                            <div class="col-md-12">
                                <div class="card card-primary">
                                    <div class="card-header">
                                        <h3 class="card-title">Product List</h3>
                                        <div class="card-tools">

                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <table id="example2" class="table table-striped table-bordered table-condensed table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Product Name</th>
                                                    <th>QTY</th>
                                                    <th>Sale Rate</th>
                                                    <th>Total Amount</th>

                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @{
                                                    if (ViewBag.DetailData != null)
                                                    {



                                                        foreach (var items in ViewBag.DetailData)
                                                        {
                                                            <tr>
                                                                <td style="display:none">@items.itemIdx</td>
                                                                <td>@items.itemName</td>
                                                                <td>@items.qty</td>
                                                                <td><input type="text" placeholder="Enter Sales Price" onkeyup="changeinunitprice(this)" value="@items.salePrice" id="salePrice" class="form-control" /></td>
                                                                @*<td id="unitprice"></td>*@
                                                                <td>@items.amount</td>
                                                                <td><input type="button" value="x" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close" /></td>
                                                            </tr>

                                                        }
                                                    }
                                                }
                                            </tbody>
                                        </table>

                                    </div>

                                    <!-- /.card-body -->
                                </div>
                                <!-- /.card -->
                            </div>

                        </div>

                    </div>

                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>




        </div>
  

        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="inputName">Taxes</label>
                    <select class="col-12" id="ddlTax">
                        <option value="0">Without Taxes</option>
                        <option value="1">With Taxes</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="row" id="checkboxdiv">

        </div>
        </br>
        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="inputName">Description</label>
                    @Html.EditorFor(model => model.description, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    <label for="inputName">Total Amount</label>
                    @Html.EditorFor(model => model.totalAmount, new { htmlAttributes = new { @placeholder = "Total Amount", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.totalAmount, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-4">
                <div class="form-group">
                    <label for="inputName">Gross Amount</label>
                    @Html.EditorFor(model => model.netAmount, new { htmlAttributes = new { @placeholder = "Total Amount", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.netAmount, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label for="inputName"></label>
                    <input type="button" class="btn btn-primary form-control" id="calculate" value="Calculate Total" />
                </div>
            </div>
        </div>
    </form>
</div>
<script type="text/javascript">
    var taxlist;
    $(document).ready(function () {
        taxlist=@Html.Raw(Json.Encode(ViewBag.TaxList));
       
    });
    $("#ddlTax").on('change', function () {
        var ddlvalue = $("#ddlTax option:selected").val();
        
            if (ddlvalue ==1 ) {
                CreateAndbindCheckBox(taxlist)
               
            }
            else {
               
                RemoveCheckBox(taxlist)
            }
        //}
        

    });

    function CreateAndbindCheckBox(pagelistdata) {
        console.log(pagelistdata);
        for (var i = 0; i < pagelistdata.length; i++) {
            var divopen = '<div class="col-sm-2"><div class="form-check">';
            var createcheckbox = '<input class="form-check-input"  value='+pagelistdata[i].taxPercent+' data-Id=' + pagelistdata[i].idx + ' type="checkbox" name="tax">';
            var checkboxlabel = '<label class="form-check-label">' + pagelistdata[i].taxName + '</label>';
            var divclose = '</div></div>';
            var dictoappend = divopen + createcheckbox + checkboxlabel + divclose;
            $('#checkboxdiv').append(dictoappend);
            $('#checkboxdiv').show();

        }


    }
    function RemoveCheckBox(pagelistdata) {
        console.log(pagelistdata);
        for (var i = 0; i < pagelistdata.length; i++) {
            var divopen = '<div class="col-sm-2"><div class="form-check">';
            var createcheckbox = '<input class="form-check-input" data-Id=' + pagelistdata[i].idx + ' type="checkbox">';
            var checkboxlabel = '<label class="form-check-label">' + pagelistdata[i].taxName + '</label>';
            var divclose = '</div></div>';
            //var dictoappend = divopen + createcheckbox + checkboxlabel + divclose;
            //$('#checkboxdiv').append(dictoappend)
            $('#checkboxdiv').empty();
            $('#checkboxdiv').hide();
            //$('#mydiv').empty();
        }


    }
    // Add To grid
    $("#qsIdx").on('change', function () {
        var ddvaue = $("#qsIdx option:selected").val();
        if (ddvaue > 0) {
            GetPODataSet(ddvaue)
            $('#btnaddtogrid').attr('disabled', true);
        }
        else
        {
            $("#example2 tbody").empty();
            $('#btnaddtogrid').attr('disabled', false);
            $("#totalAmount").val("0");
            $("#netAmount").val("0");
        }

    });

    function GetPODataSet(poid) {
        $.ajax({
            url: "/SalesOrder/SelectQSById",
            data: { id: poid },
            success: function (data) {
                var POData = JSON.parse(data.data);
                console.log(POData);

                $("#example2 tbody").empty();
                $('#milestones').show();
                var markup;
                for (var i = 0; i < POData.length; i++) {

                    console.log(data[i]);
                    var closebutton = '<input type="button" value="x" id="deleterow" disable="true" class="fa fa-window-close close" />';
                    //var salePrice = '<input type="text" placeholder="Enter Unit Price" onkeyup="changeinunitprice(this)" value="0" id="unitprice" class="form-control" />';
                    var salePrice = POData[i].salePrice;
                    //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                    //'<span aria-hidden="true" styel="color:red">&times;</span>' +
                    // '</button>'

                    var productname = POData[i].itemName; //$("#itemIdx option:selected").text();
                    var ProductID = POData[i].itemIdx;// $("#itemIdx option:selected").val();
                    var Qty = POData[i].qty;// $("#qty").val();
                    //var unitprice = POData[i].unitPrice;// $("#unitPrice").val();
                    //var totalamount = POData[i].qty * POData[i].unitPrice;
                    //var unitprice = $("#unitPrice").val();
                    //var totalamount = $("#amount").val();
                    var totalamount = (parseFloat(Qty) * parseFloat(salePrice)).toFixed(2);
                    //var duedate = $("#DueDate").val();
                    markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + salePrice + "</td><td class='tamnt'>" + totalamount + "</td><td>" + closebutton + "</td></tr>";
                    //console.log(markup);

                    $("#example2 tbody").append(markup);

                }

                var tamount = 0;

                $("#totalAmount").val(tamount);
                $("#netAmount").val(tamount);

            }
        });
    }
    var errmsg;
    //Add Project Button Event start
    $("#qty").keyup(function () {
        var qtyval = $(this).val();
        var salePriceval = $("#salePrice").val();
        var totalamount = qtyval * salePriceval;

        $("#amount").val(totalamount);
    });
    $("#salePrice").keyup(function () {
        var salePriceval = $(this).val();
        var qtyval = $("#qty").val();
        var totalamount = qtyval * salePriceval;
        $("#amount").val(totalamount);
    });


    $("#btnaddtogrid").click(function (e) {
        if (!(gridValidation($("#itemIdx option:selected").val()))) {
           // alert("Product Alreaty Exist")
            displayerror();
            return;
        }


       // alert("hello");
        $('#milestones').show();
        var closebutton = '<input type="button" value="x" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="fa fa-window-close close" />';
            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                         //'<span aria-hidden="true" styel="color:red">&times;</span>' +
                         // '</button>'
        var productname = $("#itemIdx option:selected").text();
        var ProductID = $("#itemIdx option:selected").val();
        var Qty = $("#qty").val();
        var salePrice = $("#salePrice").val();
        var totalamount = $("#amount").val();
        //var duedate = $("#DueDate").val();
        var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + salePrice + "</td><td class='tamnt'>" + totalamount + "</td><td>" + closebutton + "</td></tr>";
        //if (milestone == "") {
        //    alert("Enter milestone");
        //    return;
        //} else {

        $("#example2 tbody").append(markup);
        var tamount = 0;
        //var labourcost = $("#tax").val();
        //var transportcost = $("#taxAount").val();
       var tamount =parseFloat( $("#totalAmount").val());
       tamount = parseFloat(tamount) + parseFloat(totalamount);//+ parseFloat(labourcost) + parseFloat(transportcost);
       $("#totalAmount").val(tamount);
       $("#netAmount").val(tamount);



    });
    $('#salesorderDate').change(function () {
        var date = $(this).val();
        console.log(date, 'change')
        var GivenDate = date;
        var CurrentDate = new Date();
        GivenDate = new Date(GivenDate);

        if (GivenDate > CurrentDate) {
            alert('Given date is greater than the current date.');
            var today = moment().format('YYYY-MM-DD');
            $('#salesorderDate').val(today);
        } else {
           // alert('Given date is not greater than the current date.');
        }
    });
    function SomeDeleteRowFunction(o) {
        //alert(id);
        var $row = $(this).closest("tr"),        // Finds the closest row <tr>
             $tds = $row.find("td:nth-child(2)");
        //console.log($tds);

        $.each($tds, function () {                // Visits every single <td> element
           // console.log($(this).text());         // Prints out the text within the <td>
        });
        var itmmant = o.parentNode.parentNode.children[4].innerText;
        var tmnt = $('#totalAmount').val();

        tmnt = tmnt - itmmant;
        $('#totalAmount').val(tmnt);
        $('#netAmount').val(tmnt);
       // $('#balanceAmount').val(tmnt);
        var p = o.parentNode.parentNode;

        p.parentNode.removeChild(p);
        $(this).closest('tr').remove();


    };

    function changeinunitprice(o) {
        //alert(id);
        var $row = $(this).closest("tr"),        // Finds the closest row <tr>
             $tds = $row.find("td:nth-child(2)");
        //console.log($tds);


        var itmqty = o.parentNode.parentNode.children[2].innerText;

        var itmup = o.parentNode.parentNode.children[3].children[0].value;

        itmqty = Number(itmqty);
        itmup = Number(itmup);

        var tmnt = $('.tamnt').val()
        tmnt = Number(itmqty) * Number(itmup);

        $('.tamnt').val(tmnt);
        var totalamnt =o.parentNode.parentNode.children[4].innerText = (parseFloat(itmqty) * parseFloat(itmup));

        var tmnt = $('#totalAmount').val();
        tmnt = Number(tmnt) + (Number(itmqty) * Number(itmup))
        $('#totalAmount').val(tmnt)
        //alert(tmnt);



    };

    function gridValidation(Id) {
        errmsg = [];
        var myTab = $("#example2 tbody");
        var rtrn = true;

        // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
        myTab.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
                productid = $tds.eq(0).text();

            if(Id==productid){
                rtrn = false;
                errmsg.push("Product Already exist");
            }
        })
        if ($('#itemIdx option:selected').val() =='') {
            rtrn = false;
            errmsg.push("Select Product");
        }
        if ($('#qty').val() <= 0) {
            rtrn = false;
            errmsg.push("Qty value is zero");
        }
        if ($('#salePrice').val() <= 0) {
            rtrn = false;
            errmsg.push("Sale Price value is zero");
        }
       
        return rtrn;
    }

    function displayerror() {
        for (var i = 0; i < errmsg.length; i++) {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-top-center",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
            Command: toastr["error"](errmsg[i], "")
        }
    }

    $("#calculate").click(function (e) {
        var tmnt = $('#totalAmount').val('0');
        var table = $("#example2 tbody");
            table.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
              itemamount = $tds.eq(4).text();

            //console.log(itemamount);
           // itemamount = itemamount + itemamount;
            var calculateNetAmount=0;
            var tamnt = $('#totalAmount').val();
            tamnt = Number(tamnt) + (Number(itemamount))
            $('#totalAmount').val(tamnt)
            $('#netAmount').val(tamnt)
            var result = $('input[name="tax"]:checked');
            console.log(result);
            if (result.length > 0) {
                result.each(function () {
                    var amount = parseFloat(parseFloat(calculateNetAmount).toFixed(2));
                    var currentPercentage=$(this).val();
                    //alert(currentPercentage)
                    var currentAmountOnCheckBox =(Number(tamnt)/Number(100))*Number(currentPercentage);
                    
                    //alert(currentAmountOnCheckBox);
                    calculateNetAmount= parseFloat(parseFloat(amount)+parseFloat(currentAmountOnCheckBox)).toFixed(2) ;
                    //alert(calculateNetAmount);
                });
                //console.log(calculateNetAmount);
                $('#netAmount').val(Number(tamnt)+ Number(calculateNetAmount))
            }

        });





        ////alert(id);
        //var $row = $(this).closest("tr"),        // Finds the closest row <tr>
        //     $tds = $row.find("td:nth-child(2)");
        ////console.log($tds);


        //var itmqty = o.parentNode.parentNode.children[2].innerText;

        //var itmup = o.parentNode.parentNode.children[3].children[0].value;

        //itmqty = Number(itmqty);
        //itmup = Number(itmup);

        //var tmnt = $('.tamnt').val()
        //tmnt = Number(itmqty) * Number(itmup);

        //$('.tamnt').val(tmnt);
        //var totalamnt = o.parentNode.parentNode.children[4].innerText = (parseFloat(itmqty) * parseFloat(itmup));

        //var tmnt = $('#totalAmount').val();
        //tmnt = Number(tmnt) + (Number(itmqty) * Number(itmup))
        //$('#totalAmount').val(tmnt)
        ////alert(tmnt);



    });
</script>

