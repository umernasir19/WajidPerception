@model SSS.Property.Transactions.LP_Consigment_ViewModel
@{
    ViewBag.Title = "AddNewCI";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<div class="card-body">
    <h3>Commercial Invoice</h3>
    <br />
    <form role="form" id="purchaseform">
        @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })


        <div class="row">

            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Select CI*:</label>

                    @Html.DropDownListFor(model => model.ParentDocumentId, new SelectList(Model.CIPO, "idx", "poNumber"), "Select Commercial Invoice", new { @Class = "form-control font-weight-bold" })

                </div>
                @Html.ValidationMessageFor(model => model.ParentDocumentId, "", new { @class = "text-danger" })
            </div>

            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>PO#*:</label>
                    @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new { @placeholder = "PO Number*:", @class = "form-control", @readonly = true } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.InvoiceNo, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Date*:</label>
                    @Html.EditorFor(model => model.Invoicedate, new { htmlAttributes = new { @placeholder = "Purchase Date*:", @class = "form-control" } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.Invoicedate, "", new { @class = "text-danger" })
            </div>
            @*<div class="col-sm-3">
                     text input
                    <div class="form-group">
                        <label>Exchange Rate*:</label>
                        <input type="text" class="form-control" id="exchangerate" disabled>
                    </div>
                    @Html.ValidationMessageFor(model => model.purchaseDate, "", new { @class = "text-danger" })
                </div>*@
        </div>
        <div class="row">
        </div>
        <hr />

        <div class="row" id="PurchaseDetails">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header">
                        <h5>+CI Items</h5>
                        <div class="card-tools">

                        </div>
                    </div>
                    <div class="">
                        <table class="table table-striped table-bordered table-condensed table-hover table-active">
                            <thead class="thead-dark">
                                @*<tr>

                                        <th>Item Name</th>
                                        <th>QTY</th>
                                        <th>(Unit/DV) Price(KG)/Qty</th>
                                        <th>Total (DV)Price</th>
                                        <th>Actual DV Price</th>
                                        <th>Description</th>
                                        <th>Action</th>
                                    </tr>*@

                            </thead>
                            <tbody class="" style="background:white;">
                                <tr class="thead-dark">

                                    @*<th>Item Name</th>*@
                                    <th>Transfer Charges</th>
                                    <th>Freight</th>
                                    <th>Exise</th>
                                    <th>Delivery</th>

                                    <th>KICT</th>
                                    <th>INF</th>
                                    <th>LCBankCharges</th>
                                </tr>
                                <tr>


                                    @*<td><select id="CIITems" class="form-control"></select></td>*@
                                    <td>@Html.EditorFor(model => model.Transfer, new { htmlAttributes = new { @placeholder = "Transfer", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>

                                    <td>@Html.EditorFor(model => model.Freight, new { htmlAttributes = new { @placeholder = "Freight", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.Exise, new { htmlAttributes = new { @placeholder = "Exise", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.Delivery, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>

                                    <td>@Html.EditorFor(model => model.KICT, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.INF, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.LCBankCharges, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>


                                </tr>
                                <tr class="thead-dark">



                                    
                                    <th>Insurance</th>
                                    <th>CFKICT</th>
                                    <th>LULoading</th>

                                    <th>CustomEntry</th>
                                    <th>Appraisment</th>
                                    <th>Agency</th>

                                    <th>Labour</th>
                                </tr>
                                <tr>



                                    <td>@Html.EditorFor(model => model.Insurance, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>

                                    <td>@Html.EditorFor(model => model.CFKICT, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.LULoading, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>

                                    <td>@Html.EditorFor(model => model.CustomEntry, new { htmlAttributes = new { @placeholder = "CD percnt", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.Appraisment, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.Agency, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.Labour, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>


                                </tr>
                                <tr class="thead-dark">





                                    <th>TotalClearing</th>
                                    <th>Container</th>
                                    <th>Custom Duty</th>
                                    <th>Regulity</th>
                                    <th>SalesTax</th>
                                    <th>IncomeTax</th>
                                    <th>Value Addition 1</th>
                                </tr>
                                <tr>




                                    <td>@Html.EditorFor(model => model.TotalClearing, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control", @readonly = true, @onchange = "calculateValueaddition1()" } })</td>
                                    <td>@Html.EditorFor(model => model.Container, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control" } })</td>

                                    <td>@Html.EditorFor(model => model.Custom, new { htmlAttributes = new { @placeholder = "Custom", @class = "form-control" } })</td>
                                    <td>@Html.EditorFor(model => model.Regulity, new { htmlAttributes = new { @placeholder = "Regulity", @class = "form-control" } })</td>
                                    <td>@Html.EditorFor(model => model.SalesTax, new { htmlAttributes = new { @placeholder = "SalesTax", @class = "form-control" } })</td>
                                    <td>@Html.EditorFor(model => model.IncomeTax, new { htmlAttributes = new { @placeholder = "IncomeTax", @class = "form-control" } })</td>

                                    <td>@Html.EditorFor(model => model.ValueAddition1, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>

                                </tr>
                                <tr class="thead-dark">

                                    

                                    <th>Value Addition 2</th>

                                    <th>AdDSalesTax</th>
                                    <th>Fast Track</th>
                                    <th>Total Clearing Expense</th>
                                    <th>Calculated Percentage</th>
                                    @*<th>Action</th>*@


                                </tr>
                                <tr>


                                    <td>@Html.EditorFor(model => model.ValueAddition2, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.AdDSalesTax, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.FastTrackProfit, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.TotalClearingFinal, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>
                                    <td>@Html.EditorFor(model => model.CalculatedPercentage, new { htmlAttributes = new { @placeholder = "Landing", @class = "form-control", @onkeyup = "calculateLeftTotal()" } })</td>


                                    @*<td><input type="button" value="Add To Grid" id="btnaddtogrid" class="btn btn-primary form-control" /></td>*@
                                </tr>
                            </tbody>
                        </table>

                        @*<div class="row" style="display:block; overflow:scroll" id="milestones">
                            <div class="col-md-12">
                                <div class="card card-primary">

                                    <div class="">
                                        <table id="example2" class="table table-dark table-bordered table-hover">
                                            <thead class="thead-dark">
                                                <tr>

                                                    <th>Item Name</th>
                                                    <th colspan="1">QTY</th>
                                                    <th>(Unit/DV) Price(KG)/Qty</th>
                                                    <th>Total (DV)Price</th>
                                                    <th>Tota Price</th>
                                                    <th>Description</th>
                                                    <th>ASSVCI</th>

                                                    <th>Landing</th>
                                                    <th>CD%</th>
                                                    <th>RD%</th>

                                                    <th>ACD %</th>
                                                    <th>ST %</th>
                                                    <th>AST %</th>
                                                    <th>IT %</th>

                                                    <th>TD Rate</th>
                                                    <th>Cleaning</th>
                                                    <th>Total  Price</th>
                                                    <th>TotalASSVSCI</th>
                                                    <th>TotalLanding</th>
                                                    <th>TotalCDValue</th>
                                                    <th>TotalRDValue</th>
                                                    <th>TotalACDValue</th>
                                                    <th>TotalASTValue</th>
                                                    <th>TotalITValue</th>
                                                    <th>TotalSTValue</th>





                                                    <th>Action</th>
                                                </tr>

                                            </thead>
                                            <tbody style="background:white;color:black; ">

                                                @{
                                                    if (ViewBag.DetailData != null)
                                                    {



                                                        foreach (var items in ViewBag.DetailData)
                                                        {
                                                            <tr>
                                                                <td style="display:none">@items.itemIdx</td>
                                                                <td>@items.itemName</td>
                                                                <td>@items.qty</td>
                                                                <td><input type="text" placeholder="Enter Unit Price" onkeyup="changeinunitprice(this)" value="@items.unitPrice" id="unitprice" class="form-control" /></td>

                                                                <td>@items.amount</td>
                                                                <td><button id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close btn btn-outline-danger"><i class="fa fa-trash menu-icon"></i></button></td>
                                                            </tr>

                                                        }
                                                    }
                                                }
                                            </tbody>
                                        </table>

                                    </div>

                                    <!-- /.card-body -->
                                </div>
                                <!-- /.card -->
                            </div>

                        </div>*@

                    </div>
                </div>


                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>

        <br />

        <div class="row">
            <div class="col-sm-12">
                <div class="form-group">
                    <label for="inputName">Description</label>
                    @Html.EditorFor(model => model.Reference, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-4">
                <div class="form-group">
                    <label for="inputName">Calculated Percentage</label>
                    @Html.EditorFor(model => model.CalculatedPercentage, new { htmlAttributes = new { @placeholder = "Total Percentage", @class = "form-control", @readonly = true } })
                </div>
                @Html.ValidationMessageFor(model => model.CalculatedPercentage, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-2">
                <div class="form-group">
                    <label for="inputName"></label>
                    @*<input type="button" class="btn btn-primary form-control" step="display:none;" id="calculate" value="Calculate Total" />*@
                </div>
            </div>
        </div>
        <div class="row">
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="btnAddPO">Submit</button>
                <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </form>
</div>
@section MyScripts
    {
    <script type="text/javascript">
        var PIData;
        // Add To grid
        $("#ParentDocumentId").on('change', function () {
            var ddvaue = $("#ParentDocumentId option:selected").val();
            if (ddvaue > 0) {
                GetPODataSet(ddvaue)
                // $('#btnaddtogrid').attr('disabled', true);
            }
            else {
                $("#example2 tbody").empty();
                $('#btnaddtogrid').attr('disabled', false);
                $("#totalAmount").val("0");
            }

        });
        //product change
        $("#CIITems").on('change', function () {
            var ddvaue = $("#CIITems option:selected").val();
            if (ddvaue > 0) {


                var PerformaDetails = PIData.filter(function (el) {
                    return el.itemIdx == ddvaue;
                });
                console.log(PerformaDetails);
                AppendPI(PerformaDetails);
                // console.log(newArray);
                // $('#btnaddtogrid').attr('disabled', true);
            }
            else {
                //$("#example2 tbody").empty();
                //$('#btnaddtogrid').attr('disabled', false);
                //$("#totalAmount").val("0");
            }

        });
        function AppendPI(PIDETAILS) {
            console.log(PIDETAILS);
            $('#qty').val(PIDETAILS[0].qty);
            $('#DVRate').val(PIDETAILS[0].DVRate);
            $('#TDVRate').val(PIDETAILS[0].TDVRate);
            $('#ADVRate').val(PIDETAILS[0].ADVRate);
            $('#ItemDescription').val(PIDETAILS[0].ItemDescription);

        }

        function GetPODataSet(poid) {
            $.ajax({
                url: "/Commercial/GetCIById?id=" + poid,
                data: { id: poid },
                success: function (data) {
                    var POData = JSON.parse(data.data);
                    PIData = POData;
                    console.log(POData);

                    $("#example2 tbody").empty();
                    $('#milestones').show();
                    var markup;
                    $('#CIITems').empty();
                    //$('#exchangerate').val(POData[0].ExchangeRate);
                    $('#CIITems').append($('<option>', {
                        value: 0,
                        text: 'Select CI Item'
                    }));
                    for (var i = 0; i < POData.length; i++) {

                        $('#CIITems').append($('<option>', {
                            value: POData[i].itemIdx,
                            text: POData[i].itemName
                        }));

                        //console.log(data[i]);
                        //var closebutton = '<input type="button" value="x" id="deleterow" disable="true" class="fa fa-window-close close" />';

                        //var unitPrice = '<input type="text" placeholder="Enter Unit Price" onkeyup="changeinunitprice(this)" value="0" id="unitprice" class="form-control" />';

                        ////'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                        ////'<span aria-hidden="true" styel="color:red">&times;</span>' +
                        //// '</button>'

                        //var productname = POData[i].itemName; //$("#itemIdx option:selected").text();
                        //var ProductID = POData[i].itemIdx;// $("#itemIdx option:selected").val();
                        //var Qty = POData[i].qty;// $("#qty").val();
                        ////var unitprice = POData[i].unitPrice;// $("#unitPrice").val();
                        ////var totalamount = POData[i].qty * POData[i].unitPrice;
                        ////var unitprice = $("#unitPrice").val();
                        //var totalamount = $("#amount").val();

                        ////var duedate = $("#DueDate").val();
                        //markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + unitPrice + "</td><td class='tamnt'>" + totalamount + "</td><td>" + closebutton + "</td></tr>";
                        ////console.log(markup);

                        //$("#example2 tbody").append(markup);

                    }

                    var tamount = 0;

                    $("#totalAmount").val(tamount);

                }
            });
        }
        var errmsg;
        //Add Project Button Event start
        $("#qty").keyup(function () {
            var qtyval = $(this).val();
            var unitpriceval = $("#unitPrice").val();
            var totalamount = qtyval * unitpriceval;

            $("#amount").val(totalamount);
        });
        $("#unitPrice").keyup(function () {
            var unitpriceval = $(this).val();
            var qtyval = $("#qty").val();
            var totalamount = qtyval * unitpriceval;
            $("#amount").val(totalamount);
        });


        $("#btnaddtogrid").click(function (e) {
            //alert(1);
            if (!(gridValidation($("#itemIdx option:selected").val()))) {
                // alert("Product Alreaty Exist")
                displayerror();
                return;
            }


            // alert("hello");
            $('#milestones').show();
            var closebutton = '<input type="button" value="x" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="fa fa-window-close close" />';
            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
            //'<span aria-hidden="true" styel="color:red">&times;</span>' +
            // '</button>'
            var productname = $("#itemIdx option:selected").text();
            var ProductID = $("#itemIdx option:selected").val();
            var Qty = $("#qty").val();
            var unitprice = $("#DVRate").val();
            var totalamount = $("#TDVRate").val();
            var adv = $("#TotalPrice").val();
            var itemdescription = $("#ItemDescription").val();
            //2
            var ASSVCI = $("#ASSVCI").val();
            var TotalASSVSCI = $("#tassv").val();
            //var tassv = $("#tassv").val();
            var Landing = $("#Landing").val();
            var TotalLanding = $("#tLanding").val();


            var CDPercntage = $("#CDPercntage").val();
            var TotalCDPercntage = $("#tCDPercntage").val();


            var RDPercentage = $("#RDPercentage").val();
            var TotalRDPercentage = $("#tRDPercentage").val();
            //3
            var ACDPercentage = $("#ACDPercentage").val();
            var TotalACDPercentage = $("#tACDPercentage").val();


            var STDPercentage = $("#ITPercentage").val();
            var TotalSTDPercentage = $("#tSTDPercentage").val();

            var ASTPercentage = $("#ASTPercentage").val();
            var TotalASTPercentage = $("#tASTPercentage").val();

            var ITTPercentage = $("#ITPercentage").val();
            var TotalITTPercentage = $("#tITTPercentage").val();
            //

            var TDTax = $("#TDTax").val();
            var CleaningPrice = $("#CleaningPrice").val();
            var TotalPrice = $("#TotalPrice").val();
            //
            var row2markup = "<td>" + ASSVCI + "</td><td>" + Landing + "</td><td>" + CDPercntage + "</td><td>" + RDPercentage + "</td>";
            var row3markup = "<td>" + ACDPercentage + "</td><td>" + STDPercentage + "</td><td>" + ASTPercentage + "</td><td>" + ITTPercentage + "</td>";
            var row4markup = "<td>" + TDTax + "</td><td>" + CleaningPrice + "</td><td>" + TotalPrice + "</td>";
            var row5Totalsmarkup = "<td>" + TotalASSVSCI + "</td><td>" + TotalLanding + "</td><td>" + TotalCDPercntage + "</td><td>" + TotalRDPercentage + "</td><td>" + TotalACDPercentage + "</td><td>" + TotalSTDPercentage + "</td><td>" + TotalASTPercentage + "</td><td>" + TotalITTPercentage + "</td>";

            var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td id='unitprice'>" + unitprice + "</td><td class='tamnt'>" + totalamount + "</td><td>" + adv + "</td><td>" + itemdescription + "</td>" + row2markup + row3markup + row4markup + row5Totalsmarkup+"<td>" + closebutton + "</td></tr>";
            //if (milestone == "") {
            //    alert("Enter milestone");
            //    return;
            //} else {

            $("#example2 tbody").append(markup);
            var tamount = 0;
            //var labourcost = $("#tax").val();
            //var transportcost = $("#taxAount").val();
            var tamount = parseFloat($("#TotalPrice").val());
            tamount = parseFloat(tamount) + parseFloat(totalamount);//+ parseFloat(labourcost) + parseFloat(transportcost);
            $("#totalAmount").val(tamount.toFixed(2));



        });
        $('#purchaseDate').change(function () {
            var date = $(this).val();
            console.log(date, 'change')
            var GivenDate = date;
            var CurrentDate = new Date();
            GivenDate = new Date(GivenDate);

            if (GivenDate > CurrentDate) {
                alert('Given date is greater than the current date.');
                var today = moment().format('YYYY-MM-DD');
                $('#purchaseDate').val(today);
            } else {
                // alert('Given date is not greater than the current date.');
            }
        });
        function SomeDeleteRowFunction(o) {
            //alert(id);
            var $row = $(this).closest("tr"),        // Finds the closest row <tr>
                 $tds = $row.find("td:nth-child(2)");
            //console.log($tds);

            $.each($tds, function () {                // Visits every single <td> element
                // console.log($(this).text());         // Prints out the text within the <td>
            });
            var itmmant = o.parentNode.parentNode.children[4].innerText;
            var tmnt = $('#totalAmount').val();

            tmnt = tmnt - itmmant;
            $('#totalAmount').val(tmnt);

            // $('#balanceAmount').val(tmnt);
            var p = o.parentNode.parentNode;

            p.parentNode.removeChild(p);
            $(this).closest('tr').remove();


        };

        function changeinunitprice(o) {
            //alert(id);
            var $row = $(this).closest("tr"),        // Finds the closest row <tr>
                 $tds = $row.find("td:nth-child(2)");
            //console.log($tds);


            var itmqty = o.parentNode.parentNode.children[2].innerText;

            var itmup = o.parentNode.parentNode.children[3].children[0].value;

            itmqty = Number(itmqty);
            itmup = Number(itmup);

            var tmnt = $('.tamnt').val()
            tmnt = Number(itmqty) * Number(itmup);

            $('.tamnt').val(tmnt);
            var totalamnt = o.parentNode.parentNode.children[4].innerText = (parseFloat(itmqty) * parseFloat(itmup));

            var tmnt = $('#totalAmount').val();
            tmnt = Number(tmnt) + (Number(itmqty) * Number(itmup))
            $('#totalAmount').val(tmnt)
            //alert(tmnt);
            calculate();
            //  $("#calculate").trigger("click");


        };

        function gridValidation(Id) {
            errmsg = [];
            var myTab = $("#example2 tbody");
            var rtrn = true;

            // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
            myTab.find('tr').each(function (i) {
                var $tds = $(this).find('td'),
                    productid = $tds.eq(0).text();

                if (Id == productid) {
                    rtrn = false;
                    errmsg.push("Product Already exist");
                }
            })
            if ($('#itemIdx option:selected').val() == '') {
                rtrn = false;
                errmsg.push("Select Product");
            }
            if ($('#qty').val() <= 0) {
                rtrn = false;
                errmsg.push("Qty value is zero");
            }
            if ($('#unitPrice').val() <= 0) {
                rtrn = false;
                errmsg.push("unit value is zero");
            }
            //if ($('#DueDate').val() < 0) {
            //    rtrn = false;
            //    errmsg.push("DUE date is Invalid");
            //}
            //var dat = $('#DueDate').val()
            //console.log(moment((new Date())).format("DD-MM-YYYY"));
            //var today = moment((new Date())).format("DD-MM-YYYY");
            //var slctddte = moment(dat).format("DD-MM-YYYY");

            //if ((new Date($('#DueDate').val())) == 'Invalid Date') {
            //    rtrn = false;
            //    errmsg.push("DUE date is invalid ");
            //    // alert(errorarray.length);
            //}
            //if (slctddte < today) {
            //    rtrn = false;
            //    errmsg.push("DUE date is INVALID /Should be greater than current date");
            //    // alert(errorarray.length);
            //}
            return rtrn;
        }

        function displayerror() {
            for (var i = 0; i < errmsg.length; i++) {
                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-top-center",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }
                Command: toastr["error"](errmsg[i], "")
            }
        }

        function calculate() {
            var tmnt = $('#totalAmount').val('0');
            var table = $("#example2 tbody");
            table.find('tr').each(function (i) {
                var $tds = $(this).find('td'),
                  itemamount = $tds.eq(4).text();

                console.log(itemamount);
                // itemamount = itemamount + itemamount;

                var tamnt = $('#totalAmount').val();
                tamnt = Number(tamnt) + (Number(itemamount))
                $('#totalAmount').val(tamnt)

            });
        }


        $("#calculate").click(function (e) {


            calculate();







        });

        $("#btnAddPO").click(function (e) {
            console.log(PIData);
            e.preventDefault();
            var datatosend = {
                objpurchase: {
                    idx: $('#idx').val(),
                    InvoiceNo: $('#InvoiceNo').val(),
                    ParentDocumentId: $("#ParentDocumentId option:selected").val(),
                    //exchangerate: $('#exchangerate').val(),
                    Invoicedate: $('#Invoicedate').val(),
                    Reference: $('#Reference').val(),
                    CalculatedPercentage: $('#CalculatedPercentage').val(),
                    //ContainerNo: $('#ContainerNo').val(),
                    //DocumentNumber: $('#DocumentNumber').val(),
                    //ExchangeRate:$('#ExchangeRate').val(),
                    //description: $("#description").val(),
                    //DepartmentID: $("#DepartmentID option:selected").val(),
                    //PageList:[{ID:1},{ID:2},{ID:3}]
                    ConsigmentDetails: [],
                    CIDetailsPO:[]
                }

            }
            //var table = $("#example2 tbody");

            for (var i = 0; i < PIData.length; i++)
                console.log(PIData[i].ADVRate)
            var ADVRate = PIData[i].ADVRate;
            var ExchangeRate = PIData[i].ExchangeRate;
            var ItemID = PIData[i].itemIdx1;
            var purchaseIdx = PIData[i].PurchaseIdxCI;
            var TDTax = PIData[i].TDTax;
            var TotalLanding = PIData[i].TotalLanding;
            var qty = PIData[i].qty;

            var AVValue = (Number(ADVRate) * Number(ExchangeRate));

                var clearingPercnt=$('#CalculatedPercentage').val();
                var cleaningExpense= Number(percentage(AVValue, clearingPercnt));

                datatosend.objpurchase.CIDetailsPO.push({
                    itemidx: ItemID,
                //TotalAmount: (Number(PIData[i].ADVRate) * Number(PIData[i].ExchangeRate))*(),
                    purchaseIdx: purchaseIdx,
                CleaningPrice:cleaningExpense,
                TotalAmount: (Number(TDTax) + Number(TotalLanding) + (Number(ADVRate) * Number(ExchangeRate))) / qty
            })
            var pomasternetamount = 0;
            //table.find('tr').each(function (i) {
            //    var $tds = $(this).find('td'),
            //        productid = $tds.eq(0).text(),
            //        qty = $tds.eq(2).text(),
            //        unitprice = $tds.eq(3).text(),
            //        DVRate = $tds.eq(3).text(),
            //        TDVRate = $tds.eq(4).text(),
            //        ADVRate = $tds.eq(5).text();
            datatosend.objpurchase.ConsigmentDetails.push({
                    Productidx: 1,
                    Transfer: $('#Transfer').val(),
                    Custom: $('#Custom').val(),
                    Regulity: $('#Regulity').val(),
                    SalesTax: $('#SalesTax').val(),
                    IncomeTax: $('#IncomeTax').val(),
                    Freight: $('#Freight').val(),
                    Exise: $('#Exise').val(),
                    Delivery: $('#Delivery').val(),
                    Cotainer: $('#Cotainer').val(),
                    KICT: $('#KICT').val(),
                    INF: $('#INF').val(),
                    LCBankCharges: $('#LCBankCharges').val(),
                    Insurance: $('#Insurance').val(),
                    CFKICT: $('#CFKICT').val(),
                    LULoading: $('#LULoading').val(),
                    CustomEntry: $('#CustomEntry').val(),
                    Appraisment: $('#Appraisment').val(),
                    Agency: $('#Agency').val(),
                    Labour: $('#Labour').val(),

                    TotalClearing: $('#TotalClearing').val(),
                    AdDSalesTax: $('#AdDSalesTax').val(),
                    FastTrackProfit: $('#FastTrackProfit').val(),
                    ValueAddition1: $('#ValueAddition1').val(),
                    ValueAddition2: $('#ValueAddition2').val(),
                    CalculatedPercentage: $('#CalculatedPercentage').val(),
                    TotalClearingFinal: $('#TotalClearingFinal').val()
                    //TotalRDValue: $tds.eq(21).text(),
                    //TotalACDValue: $tds.eq(22).text(),
                    //TotalASTValue: $tds.eq(23).text(),
                    //TotalITValue: $tds.eq(24).text(),
                    //TotalSTValue: $tds.eq(25).text()

                })
                ;

          //  });




            var form = $("#purchaseform");
            console.log(datatosend)
            $.validator.unobtrusive.parse(form);
            //if ($(form).valid()) // using not operator for a time being
            if (true) {
                $.ajax({
                    type: "POST",
                    url: "/Commercial/AddUpdateConsigment",
                    data: JSON.stringify(datatosend),// JSON.stringify(milestonearray),// $(form).serialize(),
                    contentType: 'application/json',
                    dataType: 'json',
                    success: function (res) {
                        console.log(res);
                        if (res.success) {

                            window.location.href = "/Commercial/ViewCommercialInvoice/"
                        }
                        else if (res.success == false && res.msg == 'Failed') {

                        }
                    },
                    failure: function (res) {
                        console.log(res);
                    },
                    err: function (res) {
                        console.log(res);
                    }

                })
            }
            else {
                return false;
            }

        });


        //Filter Product Based On HSCODE
        $('#HSCode').change(function () {
            // get optios of second dropdown and cache it
            var $options = $('#itemIdx')
              // update the dropdown value if necessary
              .val('')
              // get options
              .find('option')
              // show all of the initially
              .show();
            console.log($options);
            // check current value is not 0
            if (this.value != '0')
                $options
                // filter out options which is not corresponds to the first option
                .not('[data-val="' + this.value + '"],[data-val=""]')
                // hide them
                .hide();
        })


        //TotalASSV
        //$('#ASSVCI').keyup(function () {
        //    var ASSVCI = $(this).val();
        //    var qty = $("#qty").val();
        //    $('#tassv').val(qty * ASSVCI);
        //})
        function percentage(num, per) {
            var x = num / 100;
            return x * per;
        }
        function calculateLeftTotal() {

            var Transfer =Number($('#Transfer').val());
            console.log(Transfer);
            var Freight = Number($('#Freight').val());
            var Exise = Number($('#Exise').val());
            var Delivery = Number($('#Delivery').val());
            var KICT = Number($('#KICT').val());
            var INF = Number($('#INF').val());
            var LCBankCharges = Number($('#LCBankCharges').val());
            var Insurance = Number($('#Insurance').val());

            var CFKICT = Number($('#CFKICT').val());
            var LULoading = Number($('#LULoading').val());
            var CustomEntry = Number($('#CustomEntry').val());
            var Appraisment = Number($('#Appraisment').val());

            var Agency = Number($('#Agency').val());
            var Labour = Number($('#Labour').val());
            var TotalClearing = Transfer + Freight + Exise + Delivery + KICT + INF + LCBankCharges + Insurance + CFKICT + LULoading + CustomEntry + Appraisment + Agency + Labour;
            TotalClearing = TotalClearing.toFixed(2);
            console.log(TotalClearing);
            $('#TotalClearing').val(TotalClearing);
           // TotalClearing
            $('#TotalClearing').change();
        }
        function culculateinputs() {
            var ASSVCI = $('#ASSVCI').val();
            var qty = $("#qty").val();
            var exchangerate = $('#exchangerate').val();

            //assvci
            var tassv = qty * ASSVCI;
            $('#tassv').val(tassv);

            //Landing
            var lndingpercntge = percentage(ASSVCI, 2.01);
            var Landingamount = parseFloat(Number(ASSVCI) + Number(lndingpercntge)).toFixed(2);

            $('#Landing').val(Landingamount);
            var tlandingamount = ((Landingamount * qty) * (exchangerate)).toFixed(2);
            $('#tLanding').val(tlandingamount)


            //CD
            var CDPercntge = $('#CDPercntage').val();
            var tcdvalue = (percentage(tlandingamount, CDPercntge)).toFixed(2);
            $('#tCDPercntage').val(tcdvalue);

            //RD
            var RDpercntge = $('#RDPercentage').val();
            var trdvalue = (percentage(tlandingamount, RDpercntge)).toFixed(2);
            $('#tRDPercentage').val(trdvalue);

            //ACD
            var acdpercntage = $('#ACDPercentage').val();
            var tacdamount = (percentage(tlandingamount, acdpercntage)).toFixed(2);
            $('#tACDPercentage').val(tacdamount);



            if (Landingamount > 0 && Number($('#tCDPercntage').val()) > 0 && Number($('#tRDPercentage').val()) > 0 && Number($('#tACDPercentage').val()) > 0 && Number($('#STPercentage').val())) {
                var tsumofpreviousamnt = (parseFloat(Number($('#tLanding').val())) + parseFloat(Number($('#tCDPercntage').val())) + parseFloat(Number($('#tRDPercentage').val())) + parseFloat(Number($('#tACDPercentage').val())));
                var STPrcntage = $('#STPercentage').val();
                var tsdamint = (percentage(tsumofpreviousamnt, STPrcntage)).toFixed(2);
                //var tsdamint = (parseFloat(Number($('#tLanding').val())) + parseFloat(Number($('#tCDPercntage').val())) + parseFloat(Number($('#tRDPercentage').val())) + parseFloat(Number($('#tACDPercentage').val()))) * (parseFloat(Number($('#STPercentage').val())));
                console.log(tsdamint)
                $('#tSTDPercentage').val(tsdamint);
            }
            else {
                $('#tSTDPercentage').val('0');
            }

            //ASTprice
            var astprcntage = $('#ASTPercentage').val();
            var sumofpreviastamount = (parseFloat(Number($('#tLanding').val())) + parseFloat(Number($('#tCDPercntage').val())) + parseFloat(Number($('#tRDPercentage').val())) + parseFloat(Number($('#tACDPercentage').val())));
            var tastamount = (percentage(sumofpreviastamount, astprcntage)).toFixed(2);
            $('#tASTPercentage').val(tastamount);

            //IItprice
            // if (Landingamount > 0 && Number($('#ITPercentage').val()) > 0 && Number($('#tRDPercentage').val()) > 0 && Number($('#tACDPercentage').val()) > 0 && Number($('#STPercentage').val())) {

            var ItPercntage = $('#ITPercentage').val();
            var sopvsitvlue = (parseFloat(Number(($('#tLanding').val())) + Number($('#tCDPercntage').val()) + Number($('#tSTDPercentage').val()) + Number($('#tRDPercentage').val()) + Number($('#tACDPercentage').val()) + Number($('#tASTPercentage').val()))).toFixed(2);
            var titvalue = (percentage(sopvsitvlue, ItPercntage)).toFixed(2);
            //alert(titvalue);
            $('#tITTPercentage').val(titvalue);

            //TDPRICE
            var tdtax = (parseFloat(Number($('#tCDPercntage').val()) + Number($('#tSTDPercentage').val()) + Number($('#tRDPercentage').val()) + Number($('#tACDPercentage').val()) + Number($('#tASTPercentage').val()) + Number($('#tITTPercentage').val()))).toFixed(2);
            $('#TDTax').val(tdtax);



            $('#tCleaningPrice').val(0);
            $('#TotalPrice').val(0);
            //$('#tCleaningPrice').val(((parseFloat(Number($('#TDTax').val())))) * (parseFloat(Number($('#CleaningPrice').val()))).toFixed(2));

            // $('#TotalPrice').val((parseFloat(Number($('#Landing').val())) + parseFloat(Number($('#TDTax').val())) + parseFloat(Number($('#tCleaningPrice').val())) / qty).toFixed(2));
        }

        function calculateValueaddition1() {
            var ddvaue = $("#CIITems option:selected").val();
           // alert('Hello')
            var TotalClearing = Number($('#TotalClearing').val());
                //var PerformaDetails = PIData.filter(function (el) {
                //    return el.itemIdx == ddvaue;
            //});
            var totalADVRATE = 0;
            var TDTax = 0;
            for (var i = 0; i < PIData.length; i++) {
                totalADVRATE = totalADVRATE + PIData[i].TotalADVRatePI;
                TDTax = TDTax + PIData[i].TDTax;
            }
            console.log('TDTax');
            console.log(TDTax);
            console.log('totalADVRATE');
            console.log(totalADVRATE);
            totalADVRATE = totalADVRATE * PIData[0].ExchangeRate
            var valueadd1 = (Number(totalADVRATE) + Number(TDTax) + Number(TotalClearing)).toFixed(2);
            $('#ValueAddition1').val(valueadd1);

            var valueadd2percntage = Number(percentage(valueadd1, 30));
            var valueadd2 = Number((Number(valueadd1) + Number(valueadd2percntage))).toFixed(2);
            $('#ValueAddition2').val(valueadd2);

            var AdDSalesTaxPercentage = Number(percentage(TotalClearing, 3));
            console.log('iiii')
            console.log(AdDSalesTaxPercentage)
            var AdDSalesTax = Number(AdDSalesTaxPercentage); //Number((Number(valueadd1) + Number(AdDSalesTaxPercentage))).toFixed(2);
            $('#AdDSalesTax').val(AdDSalesTax);

            var FastTrackProfitPercentage = Number(valueadd1) + Number(AdDSalesTax);
            var FastTrackProfit = (Number(percentage(FastTrackProfitPercentage, 10))).toFixed(2);
            $('#FastTrackProfit').val(FastTrackProfit);

            var TotalClearingFinal = Number(TotalClearing) + Number(AdDSalesTax) + Number(FastTrackProfit);
            $('#TotalClearingFinal').val(TotalClearingFinal.toFixed(2));


            var CalculatedPercentage = Number(((TotalClearingFinal * 100) / totalADVRATE))
            $('#CalculatedPercentage').val(CalculatedPercentage.toFixed(2));
        }
    </script>
}

