
@model SSS.Property.Transactions.ViewModels.LP_Voucher_ViewModel
@{
    Layout = null;
}
<div class="card-body">
    <form role="form" id="purchaseform">
        @Html.HiddenFor(model => model.idx, new { id = "idx", value = 0 })
        <div class="row">

            <div class="col-sm-4">
                <!-- text input -->
                <div class="form-group">
                    <label>Transaction Number*:</label>
                    @Html.EditorFor(model => model.voucher_no, new { htmlAttributes = new { @placeholder = "PO Number*:", @class = "form-control", @readonly = true } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.voucher_no, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-4">
                <!-- text input -->
                <div class="form-group">
                    <label>Voucher Date*:</label>
                    @Html.EditorFor(model => model.date_created, new { htmlAttributes = new { @placeholder = "Purchase Date*:", @class = "form-control" } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.date_created, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-4">
                <!-- text input -->
                <div class="form-group">
                    <label>=Reference*:</label>
                    @Html.EditorFor(model => model.reference, new { htmlAttributes = new { @placeholder = "Purchase Date*:", @class = "form-control" } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.date_created, "", new { @class = "text-danger" })
            </div>
            @*<div class="col-sm-3">
                
                <div class="form-group">
                    <label>Voucher Type*:</label>
                    @Html.DropDownListFor(model => model.voucher_type, new SelectList(Model.vouchertypelist, "idx", "Name"), "Select Product", new { @Class = "form-control font-weight-bold" })
                  
                </div>
                @Html.ValidationMessageFor(model => model.voucher_type, "", new { @class = "text-danger" })
            </div>*@
        </div>
        <div class="row">


            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Customer*:</label>
                    @Html.DropDownListFor(model => model.customer_id, new SelectList(Model.customerlist, "idx", "customerName"), "Select Customer", new { @Class = "form-control font-weight-bold" })
                </div>
                @Html.ValidationMessageFor(model => model.customer_id, "", new { @class = "text-danger" })
            </div>

            @*<div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>From Date*:</label>
                    @Html.EditorFor(model => model.From_Date, new { htmlAttributes = new { @placeholder = "Purchase Date*:", @class = "form-control" } })
                  
                </div>
                @Html.ValidationMessageFor(model => model.From_Date, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>To Date*:</label>
                    @Html.EditorFor(model => model.To_Date, new { htmlAttributes = new { @placeholder = "Purchase Date*:", @class = "form-control" } })
                   
                </div>
                @Html.ValidationMessageFor(model => model.To_Date, "", new { @class = "text-danger" })
            </div>*@
        </div>
        <div class="row">
            <div class="col-sm-6">
                <!-- text input -->
                <div class="form-group">
                    <input type="button" class="btn btn-primary form-control" value="Search" id="btnserach" />
                </div>
            </div>
        </div>


        <hr />
        <div class="row" id="PurchaseDetails">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header">
                        @*<h3 class="card-title" style=" color:white">Receipt Details</h3>*@
                        <div class="card-tools">

                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row" style="display:block; overflow:scroll" id="milestones">
                            <div class="col-md-12">
                                <div class="card card-primary">

                                    <div class="card-body">
                                        <table id="example2" class="table table-striped table-bordered table-condensed table-hover">
                                            <thead>
                                                <tr>
                                                    <th></th>
                                                    <th>SI No</th>
                                                    <th>Description</th>
                                                    <th>Amount</th>
                                                    <th>Paid Amount</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{
                                                    if (ViewBag.DetailData != null)
                                                    {



                                                        foreach (var items in ViewBag.DetailData)
                                                        {
                                                            <tr>
                                                                <td></td>
                                                                <td style="display:none">@items.itemIdx</td>
                                                                <td>@items.itemName</td>
                                                                <td>@items.qty</td>
                                                            </tr>

                                                        }
                                                    }
                                                }

                                            </tbody>
                                        </table>

                                    </div>

                                    <!-- /.card-body -->
                                </div>
                                <!-- /.card -->
                            </div>

                        </div>

                    </div>

                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>




        </div>
        <br />
        <div class="row">


            <div class="col-sm-12">
                <div class="form-group">
                    <label for="inputName">Description</label>
                    @Html.EditorFor(model => model.description, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Amount</label>
                    @Html.EditorFor(model => model.voucher_amount, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control", @readonly = true } })
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName"></label>
                    <input type="button" class="btn btn-primary form-control" id="calculateamnt" value="calculte Total" />
                </div>
            </div>
            <div class="col-sm-3">
                <div class="form-group">
                    <label for="inputName">Payment Method</label>
                    <select id="paymenttype" class="form-control">
                        <option value="1">Cash</option>
                        <option value="2">Bank</option>
                        <option value="3">Cheque</option>
                    </select>
                </div>
            </div>




        </div>
        <div class="row" id="paymntmethodoptions" style="display:none;">


            <div class="col-sm-4" id="banks">
                <div class="form-group">
                    <label for="inputName">Bank</label>
                    @Html.DropDownListFor(model => model.bank_id, new SelectList(Model.banklist, "idx", "accountTitle"), "Select Vendor", new { @Class = "form-control font-weight-bold" })
                </div>
            </div>
            <div class="col-sm-4" id="cheqno">
                <div class="form-group">
                    <label for="inputName">Cheque</label>
                    @Html.EditorFor(model => model.account_cheque_no, new { htmlAttributes = new { @placeholder = "Acc /Cheque", @class = "form-control" } })
                </div>
            </div>

        </div>

    </form>

</div>

<script type="text/javascript">

    var errmsg;
    //Add Project Button Event start
    $("#qty").keyup(function () {
        var qtyval = $(this).val();
        //var unitpriceval = $("#unitPrice").val();
        //var totalamount = qtyval * unitpriceval;

        //$("#amount").val(totalamount);
    });

    $('#paymenttype').on('change', function () {

        if ($('#paymenttype option:selected').val() == 1) {
            $('#paymntmethodoptions').hide();
        }
        if ($('#paymenttype option:selected').val() == 2) {
            $('#paymntmethodoptions').show();
            $('#cheqno').hide();
        }

        if ($('#paymenttype option:selected').val() == 3) {
            $('#paymntmethodoptions').show();
            $('#cheqno').show();
        }
    });


    $("#btnserach").click(function (e) {

        GetSIData();

        // alert("hello");
        $('#milestones').show();





    });

    function GetSIData() {
        var datatosearch = {
            objsearchPI: {
                customer_id: $('#customer_id option:selected').val(),
                From_Date: $('#From_Date').val(),
                To_Date: $('#To_Date').val()
            }
        }

        console.log(datatosearch);

        //calling API
        $.ajax({
            type: 'POST',
            url: '/Receipt/SearchSaleInvoice',
            data: datatosearch,
            success: function (res) {
                BindDataToTable(res);
            },
            failure: function (res) {
                console.log(res);
            },
            err: function (res) {
                console.log(res);
            }

        });
    }

    function BindDataToTable(res) {
        $("#example2 tbody").empty();
        for (var i = 0; i < res.data.length; i++) {


            var checkbox = '<input type="checkbox" value="' + res.data[i].idx + '"  />';
            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
            //'<span aria-hidden="true" styel="color:red">&times;</span>' +
            // '</button>'
            var soNumber = res.data[i].soNumber;
            var Description = res.data[i].description;
            var Tamount = res.data[i].netAmount;
            //var unitprice = $("#unitPrice").val();
            //var totalamount = $("#amount").val();
            var paidamount = '<input type="text"value="0.00" id="paidamnt" class="form-control qty" />';
            var markup = "<tr><td>" + checkbox + "</td><td class='pi'>" + soNumber + "</td><td>" + Description + "</td><td>" + Tamount + "</td><td>" + paidamount + "</td></tr>";
            $("#example2 tbody").append(markup);
            //if (milestone == "") {
            //    alert("Enter milestone");
            //    return;
            //} else {
        }

        var tamount = 0;
    }

    $('#mrnDate').change(function () {
        var date = $(this).val();
        console.log(date, 'change')
        var GivenDate = date;
        var CurrentDate = new Date();
        GivenDate = new Date(GivenDate);

        if (GivenDate > CurrentDate) {
            alert('Given date is greater than the current date.');
            var today = moment().format('YYYY-MM-DD');
            $('#mrnDate').val(today);
        } else {
            // alert('Given date is not greater than the current date.');
        }
    });
    function SomeDeleteRowFunction(o) {
        //alert(id);
        var $row = $(this).closest("tr"),        // Finds the closest row <tr>
             $tds = $row.find("td:nth-child(2)");
        console.log($tds);

        $.each($tds, function () {                // Visits every single <td> element
            console.log($(this).text());         // Prints out the text within the <td>
        });


        var p = o.parentNode.parentNode;

        p.parentNode.removeChild(p);
        $(this).closest('tr').remove();


    };

    function gridValidation(Id) {
        errmsg = [];
        var myTab = $("#example2 tbody");
        var rtrn = true;

        // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
        myTab.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
                productid = $tds.eq(0).text();

            if (Id == productid) {
                rtrn = false;
                errmsg.push("Product Already exist");
            }
        })
        if ($('#itemIdx option:selected').val() == '') {
            rtrn = false;
            errmsg.push("Select Product");
        }
        if ($('#qty').val() <= 0) {
            rtrn = false;
            errmsg.push("Qty value is zero");
        }

        //if ($('#DueDate').val() < 0) {
        //    rtrn = false;
        //    errmsg.push("DUE date is Invalid");
        //}
        //var dat = $('#DueDate').val()
        //console.log(moment((new Date())).format("DD-MM-YYYY"));
        //var today = moment((new Date())).format("DD-MM-YYYY");
        //var slctddte = moment(dat).format("DD-MM-YYYY");

        //if ((new Date($('#DueDate').val())) == 'Invalid Date') {
        //    rtrn = false;
        //    errmsg.push("DUE date is invalid ");
        //    // alert(errorarray.length);
        //}
        //if (slctddte < today) {
        //    rtrn = false;
        //    errmsg.push("DUE date is INVALID /Should be greater than current date");
        //    // alert(errorarray.length);
        //}
        return rtrn;
    }

    function displayerror() {
        for (var i = 0; i < errmsg.length; i++) {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-top-center",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
            Command: toastr["error"](errmsg[i], "")
        }
    }

    $('#calculateamnt').click(function (e) {

        $('#example2 input[type="checkbox"]:checked').each(function () {


            PaidAmount = $(this).closest('tr').find('.qty').val();

            var tamt = $('#voucher_amount').val()
            tamt = Number(tamt) + Number(PaidAmount);
            $('#voucher_amount').val(tamt)
        });





    });
</script>
